import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { AppConstants } from '../@core/constants/app-constants';
import { RBACINFO } from '../@core/urls/rbac-url.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../@core/service/alert.service";
import * as i3 from "../@core/service/microstrategy.service";
import * as i4 from "../@core/service/rbac.service";
import * as i5 from "../@core/service/data-store.service";
import * as i6 from "../@shared/alert/alert.component";
import * as i7 from "primeng/card";
import * as i8 from "primeng/dropdown";
import * as i9 from "primeng/accordion";
import * as i10 from "primeng/multiselect";
import * as i11 from "primeng/tabmenu";
import * as i12 from "primeng/tree";
import * as i13 from "../@core/directives/permission.directive";
import * as i14 from "@angular/common";
import * as i15 from "../@core/directives/show-field.directives";
import * as i16 from "primeng/inputtext";
import * as i17 from "primeng/api";
import * as i18 from "primeng/tooltip";
export class RolesComponent {
    constructor(injector, formBuilder, alertService, mstrService, rolesService, _storeservice, permissionService) {
        this.formBuilder = formBuilder;
        this.alertService = alertService;
        this.mstrService = mstrService;
        this.rolesService = rolesService;
        this._storeservice = _storeservice;
        this.permissionService = permissionService;
        this.deleteactive_user = false;
        this.deleteactive_buttonok = false;
        this.roleList = [];
        this.filteredRoleList = [];
        this.selectedPermissionsGroup = [];
        this.userroles = [];
        this.modelRoleName = '';
        this.permissions = [];
        this.filterPermissions = [];
        this.landingPage = [];
        this.RBACORG = new RBACINFO();
        this.items = [];
        this.mainMenuList = [];
        this.reArrangedList = [];
        this.dublicateLandingPage = [];
        this.menuList = [];
        this.subMenuList = [];
        this.parent = [];
        this.childMenuList = [];
        this.showChildren = false;
        this.parentMenulist = [];
        this.validationErrors = {};
        this.checkedRolesArr = [];
        this.buildTree = (parentId) => (item) => {
            const children = this.menuList.filter((child) => child.parentid === item.id);
            return Object.assign(Object.assign({}, item), (children.length > 0 && { children: children.map(this.buildTree(item.id)) }));
        };
        this.originalPermissions = [];
        this.formSubmit = false;
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            this.inputValidationMethod = res['INPUTVALIDATIONMETHOD'];
            if (res['RBACORG'] && res['RBACORG'] !== '') {
                this.formSubmit = false;
                this.permissionAllow = false;
                this.RBACORG = res['RBACORG'];
                this.environment = this.RBACORG['environment'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                this.httpService = res['HTTPSERVICE'];
            }
        });
    }
    nestedData() {
        this.mainMenuList = this.menuList.filter((item) => !item.parentid).map(this.buildTree(null));
    }
    ngOnInit() {
        this.initializeform();
        this.getReportDashboard();
        this.getRoleList();
        this.getPolicyGroupList();
        this.getLandingPage();
        this.getTabs();
        this.roleForm.valueChanges.subscribe(() => {
            this.enableButton = this.isAnyFormControlWithValue();
        });
    }
    isAnyFormControlWithValue() {
        const formValue = this.roleForm.value;
        const avoidProperties = ['parentid'];
        for (const key in formValue) {
            if (formValue.hasOwnProperty(key) && !avoidProperties.includes(key) && formValue[key]) {
                return true;
            }
        }
        return false;
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    initializeform() {
        this.roleForm = this.formBuilder.group({
            name: ['', Validators.required],
            defaultpageid: ['', Validators.required],
            parentid: [2],
            policyGroupId: ['', Validators.required],
            dossierid: []
        });
    }
    get formValidate() {
        return this.roleForm.controls;
    }
    onInput(event, fieldtype, label, required) {
        const error = this.inputValidationMethod(event, fieldtype, label, required);
        if (error && typeof error === 'string') {
            this.validationErrors[label] = error;
        }
        else {
            delete this.validationErrors[label];
        }
    }
    getLandingPage() {
        this.rolesService.getLandingPage('1').subscribe((res) => {
            if (res) {
                this.landingPage = res['data'].filter((x) => x.route.charAt(0) === '/');
            }
            this.dublicateLandingPage = [...this.landingPage];
        }, (error) => console.log(error));
    }
    getRoleList(_key) {
        this.rolesService.getAllUserRole(this.orgId).subscribe((res) => {
            this.roleList = res['data'].filter((a) => a.name !== 'Super admin');
            this.filteredRoleList = this.roleList;
        }, (err) => console.log(err));
    }
    getPolicyGroupList(_managementGroupId) {
        this.rolesService.getOrgPolicyGroupList(this.orgId).subscribe((res) => {
            this.policyGroupList = res['data'];
        }, (err) => console.log(err));
    }
    clearSearch(event) {
        const inputElement = document.querySelector('.form-control');
        if (inputElement) {
            inputElement.value = '';
            this.filteredRoleList = this.roleList;
        }
    }
    onClickAddRole() {
        this.enableButton = false;
        this.roleForm.reset();
        this.formSubmit = false;
        this.initializeform();
        this.roleForm.valueChanges.subscribe(() => {
            this.enableButton = this.isAnyFormControlWithValue();
        });
        this.permissionAllow = false;
        this.permissions = [];
        this.filterPermissions = [];
        this.roleId = 0;
        this.firstTab = true;
        this.validationErrors = {};
        this.policyGroupsLength = 0;
    }
    searchRole(event) {
        const value = event.target.value.toLowerCase();
        this.filteredRoleList = this.roleList.filter(a => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
    }
    clearPermission(event) {
        const inputElement = document.querySelector('.clearbox');
        if (inputElement) {
            inputElement.value = '';
        }
        this.permissions = this.originalPermissions;
    }
    searchRolePermission(event) {
        const value = event.target.value.toLowerCase();
        this.permissions = this.originalPermissions.filter(a => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.description) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
    }
    getTabs() {
        this.items = [
            {
                label: 'Permissions',
                icon: '',
                command: event => {
                    this.activateMenu(event);
                }
            },
            {
                label: 'Menu Ordering',
                icon: '',
                command: event => {
                    this.activateMenu(event);
                }
            }
        ];
        this.activeItem = this.items[0];
        this.firstTab = true;
    }
    getRoleInfo(roleid) {
        this.formSubmit = false;
        this.validationErrors = {};
        this.clearPermission();
        this.dublicateLandingPage = this.landingPage;
        this.roleId = roleid;
        if (roleid) {
            this.isDisabled = true;
            this.getTabs();
            this.rolesService.getRoleById(roleid).subscribe((res) => {
                this.permissionAllow = true;
                this.roleInformation(res);
                this.selectPolicyGroup();
            });
        }
        else {
            this.roleForm.reset();
            this.permissions = [];
            this.isDisabled = false;
            this.isDisabledOther = false;
            this.roleForm.enable();
            this.policyGroupsLength = 0;
        }
    }
    roleInformation(res) {
        var _a, _b, _c;
        this.roleForm.patchValue({
            name: res.data.name,
            defaultpageid: res.data.defaultpageid,
            parentid: res.data.parentid,
            policyGroupId: ((_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.policyGroups.filter((item) => item).map((item) => {
                return item['id'];
            })) || [],
            dossierid: (_b = JSON.parse(res.data.dossierid)) === null || _b === void 0 ? void 0 : _b.id
        });
        this.permissions = [...(_c = res === null || res === void 0 ? void 0 : res.data) === null || _c === void 0 ? void 0 : _c.permissions];
        this.filterPermissions = this.permissions;
        this.permissions = this.permissions
            .map(f => {
            return Object.assign({ isFormBuilder: false }, f);
        })
            .map(g => {
            if (g.key === 'FORM') {
                g.isFormBuilder = true;
            }
            else {
                g.isFormBuilder = false;
            }
            return g;
        });
        this.selectedPermissionsGroup = [];
        if (res.data.permissions && res.data.permissions.length) {
            res.data.permissions.forEach((ele) => {
                this.getSelectedPermisions(ele);
            });
        }
        this.originalPermissions = this.permissions;
        this.isDisabledOther = !this.hasAccess;
        const isAdmin = this.userroles.find(({ name }) => name === 'Admin');
        if (isAdmin) {
            this.roleForm.enable();
            this.isDisabledOther = false;
        }
        // else if (!this.hasAccess || res.isreadonly) {
        //   this.roleForm.controls['name'].disable();
        // }
        else {
            this.roleForm.enable();
        }
    }
    get hasAccess() {
        return this.userroles.find(({ id, name }) => id === this.roleId || name === 'Admin');
    }
    isPrivilage(permission) {
        var _a;
        if (permission && (permission === null || permission === void 0 ? void 0 : permission.permissions) && ((_a = permission === null || permission === void 0 ? void 0 : permission.permissions) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            return true;
        }
        else {
            return false;
        }
    }
    selectAllPage(index, event) {
        event.stopPropagation();
        this.permissions[index].checked = event.target.checked;
        this.setSelectedPermisions(event.target.checked, this.permissions[index].id, this.permissions[index].checked, this.permissions[index].checkedwrite);
        this.checkedRolesArr = this.permissions.filter((item) => item.checked === true);
        this.permissions[index].permissions.forEach((page) => {
            page.checked = event.target.checked;
            page.checkedwrite = event.target.checked;
            this.setSelectedPermisions(event.target.checked, page.id, page.checked, page.checkedwrite);
            page.permissions.forEach((privilege) => {
                privilege.checked = event.target.checked;
                privilege.checkedwrite = event.target.checked;
                this.setSelectedPermisions(event.target.checked, privilege.id, privilege.checked, privilege.checkedwrite);
            });
        });
    }
    getSelectedPermisions(item) {
        this.setSelectedPermisions(item.checked, item.id, item.checked, item.checkedwrite);
        if (item.permissions && item.permissions.length) {
            item.permissions.forEach((page) => {
                var _a;
                this.setSelectedPermisions(page.checked, page.id, page.checked, page.checkedwrite);
                if (page && ((_a = page.permissions) === null || _a === void 0 ? void 0 : _a.length)) {
                    page.permissions.forEach((privilege) => {
                        this.setSelectedPermisions(privilege.checked, privilege.id, privilege.checked, privilege.checkedwrite);
                    });
                }
            });
        }
    }
    selectAllPrivilage(pageIndex, permissionIndex, event) {
        event.stopPropagation();
        this.permissions[pageIndex].checked = event.target.checked;
        if (event.target.value === 'read' || event.target.value === 'on') {
            this.permissions[pageIndex].permissions[permissionIndex].checked = event.target.checked;
        }
        if (event.target.value === 'write') {
            this.permissions[pageIndex].permissions[permissionIndex].checkedwrite = event.target.checked;
        }
        this.setSelectedPermisions(event.target.checked, this.permissions[pageIndex].permissions[permissionIndex].id, this.permissions[pageIndex].permissions[permissionIndex].checked, this.permissions[pageIndex].permissions[permissionIndex].checkedwrite);
        if (event.target.value === 'read' || event.target.value === 'on') {
            if (event.target.checked || !event.target.checked) {
                this.permissions[pageIndex].permissions[permissionIndex].permissions.forEach((page) => {
                    page.checked = event.target.checked;
                    this.setSelectedPermisions(event.target.checked, page.id, page.checked, page.checkedwrite);
                });
            }
        }
        else if (event.target.value === 'write') {
            if (event.target.checked) {
                this.permissions[pageIndex].permissions[permissionIndex].permissions.forEach((page) => {
                    page.checkedwrite = event.target.checked;
                    this.setSelectedPermisions(event.target.checked, page.id, page.checked, page.checkedwrite);
                });
            }
        }
        this.getPageChecked(pageIndex);
    }
    selectPage(pageIndex, permissionIndex, event) {
        event.stopPropagation();
        if (event.target.value === 'write') {
            this.permissions[pageIndex].permissions[permissionIndex].checkedwrite = event.target.checked;
        }
        if (event.target.value === 'read') {
            this.permissions[pageIndex].permissions[permissionIndex].checked = event.target.checked;
        }
        this.setSelectedPermisions(event.target.checked, this.permissions[pageIndex].permissions[permissionIndex].id, this.permissions[pageIndex].permissions[permissionIndex].checked, this.permissions[pageIndex].permissions[permissionIndex].checkedwrite);
        this.getPageChecked(pageIndex);
    }
    selectPrivilege(pageIndex, permissionIndex, privilegeIndex, event) {
        event.stopPropagation();
        if (event.target.value === 'write') {
            this.permissions[pageIndex].permissions[permissionIndex].permissions[privilegeIndex].checkedwrite =
                event.target.checked;
        }
        if (event.target.value === 'read' || event.target.value === 'on') {
            this.permissions[pageIndex].permissions[permissionIndex].permissions[privilegeIndex].checked =
                event.target.checked;
        }
        this.setSelectedPermisions(event.target.checked, this.permissions[pageIndex].permissions[permissionIndex].permissions[privilegeIndex].id, this.permissions[pageIndex].permissions[permissionIndex].permissions[privilegeIndex].checked, this.permissions[pageIndex].permissions[permissionIndex].permissions[privilegeIndex].checkedwrite);
        this.getPrivilageChecked(pageIndex, permissionIndex);
        this.getPageChecked(pageIndex);
    }
    getPageChecked(pageIndex) {
        if (this.permissions[pageIndex].checked !== this.getChecked(this.permissions[pageIndex].permissions) &&
            this.permissions[pageIndex].checkedwrite !== this.getCheckedWrite(this.permissions[pageIndex].permissions)) {
            this.permissions[pageIndex].checked = this.getChecked(this.permissions[pageIndex].permissions);
            this.setSelectedPermisions(this.permissions[pageIndex].checked, this.permissions[pageIndex].id, this.permissions[pageIndex].checked, this.permissions[pageIndex].checkedwrite);
        }
    }
    getPrivilageChecked(pageIndex, permissionIndex) {
        if (this.permissions[pageIndex].permissions[permissionIndex].checked !==
            this.getChecked(this.permissions[pageIndex].permissions[permissionIndex].permissions)) {
            this.permissions[pageIndex].permissions[permissionIndex].checked = this.getChecked(this.permissions[pageIndex].permissions[permissionIndex].permissions);
            this.setSelectedPermisions(this.permissions[pageIndex].permissions[permissionIndex].checked, this.permissions[pageIndex].permissions[permissionIndex].id, this.permissions[pageIndex].permissions[permissionIndex].checked, this.permissions[pageIndex].permissions[permissionIndex].checkedwrite);
        }
        else if (this.permissions[pageIndex].permissions[permissionIndex].checkedwrite !==
            this.getCheckedWrite(this.permissions[pageIndex].permissions[permissionIndex].permissions)) {
            this.permissions[pageIndex].permissions[permissionIndex].checkedwrite = this.getCheckedWrite(this.permissions[pageIndex].permissions[permissionIndex].permissions);
            this.setSelectedPermisions(this.permissions[pageIndex].permissions[permissionIndex].checked, this.permissions[pageIndex].permissions[permissionIndex].id, this.permissions[pageIndex].permissions[permissionIndex].checked, this.permissions[pageIndex].permissions[permissionIndex].checkedwrite);
        }
    }
    selectAllAccess(value) {
        if (value === false) {
            this.checkedRolesArr = [];
        }
        this.permissions.forEach((page) => {
            page.checked = value;
            this.setSelectedPermisions(value, page.id, page.checked, page.checkedwrite);
            if (page && page.permissions) {
                page.permissions.forEach((permission) => {
                    var _a;
                    permission.checked = value;
                    this.setSelectedPermisions(value, permission.id, permission.checked, permission.checkedwrite);
                    if (permission && ((_a = permission.permissions) === null || _a === void 0 ? void 0 : _a.length)) {
                        permission.permissions.forEach((privilege) => {
                            privilege.checked = value;
                            privilege.checkedwrite = value;
                            this.setSelectedPermisions(value, privilege.id, privilege.checked, privilege.checkedwrite);
                        });
                    }
                });
            }
        });
    }
    addNewRole(id) {
        this.permissions = [];
        this.formSubmit = false;
        this.permissionAllow = false;
        this.rolesService.getPermissionRoleById(id).subscribe((res) => {
            this.permissionAllow = true;
            this.permissions = res['data'];
        }, (err) => console.log(err));
    }
    setSelectedPermisions(_selected, id, allow, write) {
        const index = this.selectedPermissionsGroup.findIndex(res => res.id === id);
        if (index === -1 && allow) {
            this.selectedPermissionsGroup.push({ id, allow, write });
        }
        else if (!allow && !write && index !== -1) {
            this.selectedPermissionsGroup.splice(index, 1);
        }
        else if (index !== -1) {
            this.selectedPermissionsGroup = this.selectedPermissionsGroup.map(i => {
                if (i.id === id) {
                    i.write = write;
                    i.allow = allow;
                }
                return i;
            });
        }
    }
    resetReportDashboardList() {
        this.reportDashboardList = this.duplicatereportDashboardList;
    }
    addRole() {
        var _a, _b;
        this.formSubmit = true;
        let data = this.roleForm.getRawValue();
        if (this.roleForm.valid) {
            const dossierConfig = (_b = (_a = this.reportDashboardList) === null || _a === void 0 ? void 0 : _a.filter((dossier) => dossier.id === data.dossierid)) === null || _b === void 0 ? void 0 : _b.map((a) => ({
                id: a.id,
                projectId: a.projectId
            }))[0];
            data.priority = this.environment.priority;
            data.applicationid = this.environment.applicationid;
            data.parentid = 2;
            data.permissions = this.selectedPermissionsGroup;
            data.dossierid = JSON.stringify(dossierConfig);
            data = Object.assign({ organizationid: this.orgId }, data);
            if (this.roleId) {
                data.id = Number(this.roleId);
                this.rolesService.updateRole(this.roleId, data).subscribe(() => {
                    this.getRoleList();
                    this.mapPolicyGroupToRole(this.roleId, data.policyGroupId);
                    this.alertService.success('Role updated successfully');
                }, (err) => this.alertService.error(err.error.message));
            }
            else {
                data.id = 0;
                data.priority = this.environment.priority;
                this.rolesService.createRole(data).subscribe((res) => {
                    this.cancel();
                    if (data.policyGroupId) {
                        this.mapPolicyGroupToRole(res['data'], data.policyGroupId, 'add');
                    }
                    this.alertService.success('Role saved successfully');
                    this.getRoleList();
                }, (err) => this.alertService.error(err.error.message));
            }
        }
    }
    mapPolicyGroupToRole(id, data, action) {
        if (action === 'add') {
            this.rolesService.createPolicyGroupForRole(id, data).subscribe(() => console.log('policy group mapped to role successfully'), (_err) => this.alertService.error(AppConstants.errorMessage));
        }
        else {
            this.rolesService.updatePolicyGroupForRole(id, data).subscribe(() => console.log('policy group mapped to role successfully'), (_err) => this.alertService.error(AppConstants.errorMessage));
        }
    }
    getReturnValue(array = [], type) {
        return type === 'id'
            ? array.map(({ id }) => id)
            : array.map(id => {
                return { id };
            });
    }
    getChecked(item) {
        return item.filter(({ checked }) => checked).length > 0;
    }
    getCheckedWrite(item) {
        return item.filter(({ checkedwrite }) => checkedwrite).length > 0;
    }
    cancel() {
        this.roleForm.reset();
        this.roleForm.enable();
        this.permissions = [];
        this.formSubmit = false;
        this.permissionAllow = false;
        this.roleId = 0;
        this.validationErrors = {};
        this.filteredRoleList = this.roleList;
        this.policyGroupsLength = 0;
    }
    delete(event, id, item) {
        if ((item === null || item === void 0 ? void 0 : item.active_user) !== null) {
            this.deleteactive_user = false;
            this.deleteactive_buttonok = false;
            // Perform action when active_user is not null
            console.log('Deleting Role with active user');
            this.modalContent = 'This Role is currently associated with active users. De-link users from this Role, to proceed with deleting.';
        }
        else {
            // Perform action when active_user is null
            console.log('Deleting Role');
            this.modalContent = 'Are you sure you want to delete the Role?';
            this.deleteactive_user = true;
            this.deleteactive_buttonok = true;
        }
        event.stopPropagation();
        this.deletedId = id;
        $('#Deleteuser').modal('show');
    }
    deleteRole() {
        this.rolesService.deleteRole(this.deletedId).subscribe(() => {
            this.cancel();
            this.alertService.success('Role deleted successfully');
            $('#Deleteuser').modal('hide');
            this.getRoleList();
        }, (_err) => this.alertService.error('Failed to delete Role'));
    }
    getReportDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reportDashboardList = yield this.mstrService.getLibraryDetails();
            this.duplicatereportDashboardList = yield this.mstrService.getLibraryDetails();
        });
    }
    // roleValidation(): any {
    //   if (!this.roleForm.value.dossierid) {
    //     this.alertService.warn('Please fill all required fields');
    //     return false;
    //   }
    //   return true;
    // }
    onModelRole(value) {
        this.modelRoleName = value;
    }
    searchLandingPageList(event) {
        const value = event.target.value.toLowerCase();
        this.dublicateLandingPage = this.landingPage.filter((a) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
    }
    resetLandingPageList() {
        this.dublicateLandingPage = this.landingPage;
    }
    activateMenu(event) {
        if (event.item.label == 'Permissions') {
            this.firstTab = true;
            this.clearPermission();
        }
        else {
            this.firstTab = false;
            this.getPageInformation();
        }
    }
    getPageInformation() {
        this.permissionService.getAllPages(this.roleId).subscribe((res) => {
            this.menuList = res === null || res === void 0 ? void 0 : res.data;
            res.data.map((item, index) => {
                item.label = item.name;
            });
            this.nestedData();
            console.log(this.mainMenuList);
            // document.querySelector('#result').innerHTML = this.buildNavigation(this.menuList);
            // res.data.map((item, index) => {
            //   if (item.parentid == null) {
            //     let obj = {
            //       key : 1,
            //       id: item.id,
            //       parentid: item.parentid,
            //       label: item.name,
            //       data: 'Documents Folder',
            //       icon: 'pi pi-fw pi-inbox',
            //       children: []
            //     }
            //     this.mainMenuList.push(obj)
            //   }
            // });
            // this.mainMenuList.map((menu, index1) => {
            //   this.menuList.map((list, index) => {
            //     if (list?.parentid == menu?.id) {
            //       let obj = {
            //         key : 2,
            //         id: list.id,
            //         parentid: list.parentid,
            //         label: list.name,
            //         data: 'Documents Folder',
            //         icon: 'pi pi-fw pi-inbox',
            //         children: []
            //       }
            //       this.mainMenuList[index1].children.push(obj);
            //     }
            //   })
            // })
            // this.mainMenuList.map((menu, index1) => {
            //   menu.children.map((subitem, subindex) => {
            //     this.menuList.map((list, index) => {
            //       if(list.parentid == subitem.id)
            //       {
            //         let obj = {
            //             key : 3,
            //             id: list.id,
            //             parentid: list.parentid,
            //             label: list.name,
            //             data: 'Documents Folder',
            //             icon: 'pi pi-fw pi-inbox',
            //           }
            //           subitem.children.push(obj);
            //       }
            //     })
            //   })
            // })
        });
    }
    updateMenuOrder() {
        this.mainMenuList.forEach((element, index) => {
            var _a, _b;
            let data = {
                'menuorder': index + 1,
                'id': element.rolepermissionid,
                'roleid': this.roleId
            };
            this.reArrangedList.push(data);
            if (((_a = element === null || element === void 0 ? void 0 : element.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                (_b = element === null || element === void 0 ? void 0 : element.children) === null || _b === void 0 ? void 0 : _b.forEach((childelement, childindex) => {
                    var _a, _b;
                    let childdata = {
                        'menuorder': childindex + 1,
                        'id': childelement.rolepermissionid,
                        'roleid': this.roleId
                    };
                    this.reArrangedList.push(childdata);
                    if (((_a = childelement === null || childelement === void 0 ? void 0 : childelement.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                        (_b = childelement === null || childelement === void 0 ? void 0 : childelement.children) === null || _b === void 0 ? void 0 : _b.forEach((childrenelement, childrenindex) => {
                            let childrendata = {
                                'menuorder': childrenindex + 1,
                                'id': childrenelement.rolepermissionid,
                                'roleid': this.roleId
                            };
                            this.reArrangedList.push(childrendata);
                        });
                    }
                });
            }
        });
        console.log('this.rearrangelist', this.reArrangedList);
        this.permissionService.updateMenuOrder({ pages: this.reArrangedList }).subscribe((res) => {
            // this.alertService.success('Updated Successfully!');
            // this.Service.sendUpdate('Updated Successfully');
            // this.getPageInformation();
            this.addRole();
            const userRole = sessionStorage.getItem('role_id');
            if (Number(userRole) === this.roleId) {
                window.location.reload();
            }
        });
    }
    nodeDrop(event) {
        if (event.originalEvent.target.childNodes.length === 0) {
            if (event.dragNode.parentid == event.dropNode.parentid) {
                event.accept();
            }
            else {
                this.alertService.error('Not Allowed to Drop');
            }
            console.log('this.mainMenuList', this.mainMenuList);
        }
        else {
            this.alertService.error('Not Allowed to Drop');
        }
    }
    selectPolicyGroup() {
        this.policyGroupsLength = this.roleForm.value.policyGroupId.length;
    }
}
RolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: RolesComponent, deps: [{ token: i0.Injector }, { token: i1.FormBuilder }, { token: i2.AlertService }, { token: i3.MicrostrategyService }, { token: i4.RbacService }, { token: i5.DataStoreService }, { token: i4.RbacService }], target: i0.ɵɵFactoryTarget.Component });
RolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: RolesComponent, selector: "roles", ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"permission\">\r\n  <div class=\"row\" [formGroup]=\"roleForm\">\r\n    <div class=\"col-lg-4 col-md-6 col-12\">\r\n      <div class=\"clearfix\"></div>\r\n      <div class=\"tab-content py-2 px-2 px-sm-0\">\r\n        <div class=\"tab-pane fade show active\">\r\n          <div class=\"form-group bgiconsearch d-flex align-items-center\"> <!-- Modified line -->\r\n            <span class=\"p-input-icon-right w-100\">\r\n              <i class=\"pi pi-times-circle\" (click)=\"clearSearch($event)\"></i>\r\n              <input class=\"form-control\" fieldKey=\"SETTINGS_ROL_SEARCH_BY_NAME\" placeholder=\"Search by Role name\"\r\n                type=\"text\" (keyup)=\"searchRole($event)\" />\r\n            </span>\r\n            <button type=\"button\" class=\"btn btn-primary btncommon ml-2\" (click)=\"onClickAddRole()\">Add</button>\r\n          </div>\r\n          <div class=\"clearfix\"></div>\r\n          <div class=\"useracess\">\r\n            <div class=\"d-flex align-items-center justify-content-center h-100 w-100 ng-star-inserted\"\r\n              *ngIf=\"!filteredRoleList.length\">\r\n              <p>No Record Found</p>\r\n            </div>\r\n            <ng-container *ngFor=\"let item of filteredRoleList\">\r\n              <div class=\"row userdata align-items-center\" (click)=\"getRoleInfo(item.id)\"\r\n                [ngClass]=\"{ active: +item.id === roleId }\">\r\n                <div class=\"col-md-10 col-sm-10 col-10 overflow_txt\">\r\n                  <span class=\"nameuser\">{{ item.name }}</span> <br />\r\n                </div>\r\n                <div class=\"col-md-2 text-right\">\r\n                  <span class=\"right-icons\">\r\n                    <em class=\"fa fa-trash text-primary\" *showField=\"'SETTINGS_ROL_DELETE'\"\r\n                      (click)=\"delete($event, item.id, item)\" aria-hidden=\"true\"></em>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-lg-8 col-md-6 col-12 roles-right group-role mt-2\">\r\n      <p-card class=\"rbac-card\" [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Role Details</span>\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid row\">\r\n          <div class=\"p-field col-lg-4 col-md-12 col-12\">\r\n            <label for=\"rolesName\" class=\"referral-form-labels\">Role Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"rolesName\" type=\"text\" fieldKey=\"SETTINGS_ROL_ROLE_NAME\" formControlName=\"name\"\r\n              placeholder=\"Enter Role Name\" aria-describedby=\"rolesName\" [(ngModel)]=\"modelRoleName\"\r\n              (ngModelChange)=\"onModelRole($event)\" (input)=\"onInput($event, 'name', 'Role Name', true)\" pInputText />\r\n            <div *ngIf=\"validationErrors['Role Name']\" class=\"p-error block mt-1\">{{validationErrors['Role Name']}}\r\n            </div>\r\n            <div *ngIf=\"!validationErrors['Role Name'] && formValidate['name'].errors && formSubmit\">\r\n              <div *ngIf=\"formValidate['name'].invalid\" class=\"p-error block mt-1\">Role Name is required </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field col-lg-4 col-md-12 col-12\">\r\n            <label aria-labelledby=\"landingPage\" for=\"landingPage\" class=\"referral-form-labels\">Landing Page\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown name=\"landingPage\" [options]=\"dublicateLandingPage\" placeholder=\"Select Landing Page\"\r\n              formControlName=\"defaultpageid\" defaultLabel=\"Select Landing Page\" (onHide)=\"resetLandingPageList()\"\r\n              [resetFilterOnHide]=\"true\" [filter]=\"true\" filterBy=\"name\" (keyup)=\"searchLandingPageList($event)\"\r\n              [showClear]=\"true\" fieldKey=\"SETTINGS_ROL_LANDING_PAGE\" optionLabel=\"name\" optionValue=\"id\"\r\n              inputId=\"landingPage\">\r\n              <ng-template let-item pTemplate=\"selectedItem\">\r\n                <div pTooltip=\"{{item?.name}}\" tooltipPosition=\"top\" class=\"text-truncate\"> {{ item?.name }}</div>\r\n              </ng-template>\r\n              <ng-template let-object pTemplate=\"item\">\r\n                {{ object.name }}\r\n              </ng-template>\r\n            </p-dropdown>\r\n            <div *ngIf=\"formValidate['defaultpageid'].errors && formSubmit\">\r\n              <div *ngIf=\"formValidate['defaultpageid'].invalid\" class=\"p-error block mt-1\">Landing Page is required\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field col-lg-4 col-md-12 col-12\">\r\n            <label aria-labelledby=\"dossierId\" for=\"dossierId\" class=\"referral-form-labels\">Report Dashboard</label>\r\n            <p-dropdown [options]=\"reportDashboardList\" optionLabel=\"name\" id=\"dossierid\" [resetFilterOnHide]=\"true\"\r\n              [filter]=\"true\" [showClear]=\"true\" optionValue=\"id\" placeholder=\"Select ID\" formControlName=\"dossierid\">\r\n              <ng-template let-item pTemplate=\"selectedItem\">\r\n                <div pTooltip=\"{{item?.name}}\" tooltipPosition=\"top\" class=\"text-truncate\"> {{ item?.name }}</div>\r\n              </ng-template>\r\n              <ng-template let-object pTemplate=\"item\">\r\n                {{ object.name }}\r\n              </ng-template>\r\n            </p-dropdown>\r\n          </div>\r\n          <!-- <div class=\"p-field col-lg-4 col-md-12 col-12\"></div>\r\n            <div class=\"p-field col-lg-4 col-md-12 col-12\">\r\n              <button\r\n                class=\"pull-right mb-2 btn btn-primary btncommon report_button\"\r\n                fieldKey=\"SETTINGS_ROL_CONFIGURE_PERMISSION\"\r\n                (click)=\"addNewRole('1')\">\r\n                Configure Permission\r\n              </button>\r\n            </div> -->\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid row\">\r\n          <div class=\"p-field col-md-12 col-12\">\r\n            <p-accordion class=\"w-full policygroup-accordion\" iconPos=\"endVal\">\r\n              <p-accordionTab>\r\n                <ng-template pTemplate=\"header\">\r\n                  <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n                    <span class=\"font-bold\">\r\n                      <label aria-labelledby=\"policyGroupList\" for=\"policyGroupList\"\r\n                        class=\"mb-0 referral-form-labels\">Policy\r\n                        Groups\r\n                        <span class=\"requiredfield text-danger\">*</span>\r\n                        <span *ngIf=\"policyGroupsLength > 0\" class=\"pg-count ml-2\">{{policyGroupsLength}}</span>\r\n                      </label>\r\n                    </span>\r\n                  </span>\r\n                </ng-template>\r\n\r\n                <p-multiSelect name=\"policyGroupList\" [options]=\"policyGroupList\" formControlName=\"policyGroupId\"\r\n                  defaultLabel=\"Select Policy Groups\" optionLabel=\"policygroupname\" optionValue=\"id\"\r\n                  (onHide)=\"resetReportDashboardList()\" [resetFilterOnHide]=\"true\" inputId=\"policyGroupList\"\r\n                  ariaFilterLabel=\"null\" fieldKey=\"SETTINGS_ROL_POLICY_GROUP\" display=\"chip\"\r\n                  styleClass=\"policygroup-v2 w-100\" (onChange)=\"selectPolicyGroup()\">\r\n                </p-multiSelect>\r\n              </p-accordionTab>\r\n            </p-accordion>\r\n            <div *ngIf=\"formValidate['policyGroupId'].errors && formSubmit\">\r\n              <div *ngIf=\"formValidate['policyGroupId'].invalid\" class=\"p-error block mt-1\">Policy Group is required\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"mt-2\" *ngIf=\"permissionAllow\">\r\n          <button class=\"pull-right mb-2 mr-2 btn btn-primary btncommon\" fieldKey=\"SETTINGS_ROL_SELECT_ALL\"\r\n            (click)=\"selectAllAccess(true)\">\r\n            Select All\r\n          </button>\r\n          <button fieldKey=\"SETTINGS_ROL_RESET\" class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\"\r\n            (click)=\"selectAllAccess(false)\" [disabled]=\"checkedRolesArr.length === 0\">\r\n            Reset\r\n          </button>\r\n          <!-- <br /> -->\r\n        </div>\r\n        <div class=\"strip_head toggleleft adjusttop\" *ngIf=\"permissionAllow\">\r\n          <!-- <span class=\"report_head font-weight-bold\">Permissions</span> -->\r\n          <p-tabMenu [model]=\"items\" [activeItem]=\"activeItem\"></p-tabMenu>\r\n        </div>\r\n\r\n        <div *ngIf=\"firstTab\">\r\n          <div class=\"clearfix\"></div>\r\n          <div class=\"mt-2 mb-3\">\r\n            <div *ngIf=\"permissionAllow\">\r\n              <div class=\"permission-filter\">\r\n                <input class=\"form-control clearbox\" placeholder=\"Search by Permissions name\" type=\"text\"\r\n                  (keyup)=\"searchRolePermission($event)\" />\r\n                <i class=\"pi pi-times-circle\" (click)=\"clearPermission($event)\"></i>\r\n              </div>\r\n              <div class=\"d-flex align-items-center justify-content-center h-100 w-100 ng-star-inserted\"\r\n                *ngIf=\"!filterPermissions.length\">\r\n                <p>No Record Found</p>\r\n              </div>\r\n            </div>\r\n            <p-accordion class=\"w-100\">\r\n              <p-accordionTab class=\"w-100\" *ngFor=\"let page of permissions; let i = index\">\r\n                <ng-template pTemplate=\"header\">\r\n                  {{ page.description }}\r\n                </ng-template>\r\n                <ng-template pTemplate=\"content\">\r\n                  <div class=\"heading_analysis datamargin\">\r\n                    <div class=\"Customcheckbox pl-1\">\r\n                      <input type=\"checkbox\" class=\"styled-checkbox\" id=\"custom{{ i }}\"\r\n                        (change)=\"selectAllPage(i, $event)\" [checked]=\"page?.checked\" />\r\n                      <label for=\"custom{{ i }}\" class=\"heading_role\">{{ page.description }}</label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <ul class=\"marginul_list ecms_rolescroll\">\r\n                    <ng-container *ngFor=\"let permission of page?.permissions; let j = index\">\r\n                      <ng-container *ngIf=\"isPrivilage(permission); else permissionOnly\">\r\n                        <li>\r\n                          <div class=\"inner_childaccess d-flex mt-0 py-1\">\r\n                            <div class=\"d-inline-flex align-items-center\">\r\n                              <label class=\"Customcheckbox pl-1 mb-0\">\r\n                                <input type=\"checkbox\" [checked]=\"permission?.checked\"\r\n                                  (change)=\"selectAllPrivilage(i, j, $event)\" id=\"description{{ j }}\" />\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                              <label for=\"description{{ j }}\" class=\"heading_role mb-0\">{{\r\n                                permission.description\r\n                                }}</label>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <li class=\"ml-1\" *ngFor=\"let privilege of permission?.permissions; let k = index\">\r\n                          <div class=\"d-flex\">\r\n                            <div class=\"custom-control custom-switch\">\r\n                              <input type=\"checkbox\" [checked]=\"privilege?.checked\" class=\"custom-control-input\"\r\n                                id=\"customSwitchesroless{{ i }}{{ j }}{{ k }}\"\r\n                                (click)=\"selectPrivilege(i, j, k, $event)\" />\r\n                              <label class=\"custom-control-label\" for=\"customSwitchesroless{{ i }}{{ j }}{{ k }}\">{{\r\n                                privilege.description\r\n                                }}</label>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      </ng-container>\r\n                      <ng-template #permissionOnly>\r\n                        <li>\r\n                          <div class=\"custom-control custom-switch\">\r\n                            <input type=\"checkbox\" [checked]=\"permission?.checked\" class=\"custom-control-input\"\r\n                              (click)=\"selectPage(i, j, $event)\" id=\"customSwitchesroles{{ i }}{{ j }}\" />\r\n                            <label class=\"custom-control-label\" for=\"customSwitchesroles{{ i }}{{ j }}\">{{\r\n                              permission.description }}\r\n                            </label>\r\n                          </div>\r\n                        </li>\r\n                      </ng-template>\r\n                    </ng-container>\r\n                  </ul>\r\n                </ng-template>\r\n              </p-accordionTab>\r\n            </p-accordion>\r\n            <div class=\"col-md-12 box d-none\" *ngFor=\"let page of permissions; let i = index\">\r\n              <div class=\"heading_analysis datamargin\">\r\n                <div class=\"Customcheckbox\">\r\n                  <input type=\"checkbox\" class=\"styled-checkbox\" id=\"custom{{ i }}\" (change)=\"selectAllPage(i, $event)\"\r\n                    [checked]=\"page?.checked\" />\r\n                  <label for=\"custom{{ i }}\" class=\"heading_role\">{{ page.description }}</label>\r\n                </div>\r\n              </div>\r\n\r\n              <ul class=\"marginul_list ecms_rolescroll\">\r\n                <ng-container *ngFor=\"let permission of page?.permissions; let j = index\">\r\n                  <ng-container *ngIf=\"isPrivilage(permission); else permissionOnly\">\r\n                    <li>\r\n                      <div class=\"inner_childaccess\">\r\n                        <label class=\"Customcheckbox\">\r\n                          <input type=\"checkbox\" [checked]=\"permission?.checked\"\r\n                            (change)=\"selectAllPrivilage(i, j, $event)\" />\r\n                          <span class=\"checkmark\"></span>\r\n                        </label>\r\n                        <span class=\"heading_role\">{{ permission.description }}</span>\r\n                      </div>\r\n                    </li>\r\n                    <li *ngFor=\"let privilege of permission?.permissions; let k = index\">\r\n                      <div class=\"custom-control custom-switch\">\r\n                        <input type=\"checkbox\" [checked]=\"privilege?.checked\" class=\"custom-control-input\"\r\n                          id=\"customSwitchesroless{{ i }}{{ j }}{{ k }}\" (click)=\"selectPrivilege(i, j, k, $event)\" />\r\n                        <label class=\"custom-control-label\" for=\"customSwitchesroless{{ i }}{{ j }}{{ k }}\">{{\r\n                          privilege.description\r\n                          }}</label>\r\n                      </div>\r\n                    </li>\r\n                  </ng-container>\r\n                  <ng-template #permissionOnly>\r\n                    <li>\r\n                      <div class=\"custom-control custom-switch\">\r\n                        <input type=\"checkbox\" [checked]=\"permission?.checked\" class=\"custom-control-input\"\r\n                          (click)=\"selectPage(i, j, $event)\" id=\"customSwitchesroles{{ i }}{{ j }}\" />\r\n                        <label class=\"custom-control-label\" for=\"customSwitchesroles{{ i }}{{ j }}\">{{\r\n                          permission.description }}\r\n                        </label>\r\n                      </div>\r\n                    </li>\r\n                  </ng-template>\r\n                </ng-container>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <button class=\"pull-right btn btn-primary btncommon\" fieldKey=\"SETTINGS_ROL_ADD_ROLE\" (click)=\"addRole()\">\r\n              {{ roleId ? 'Update' : 'Add' }} Role\r\n            </button>\r\n            <button class=\"pull-right mr-2 btn bg-white text-primary btncancel\" fieldKey=\"SETTINGS_ROL_CANCEL\"\r\n              (click)=\"cancel()\" [disabled]=\"!enableButton\">\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"!firstTab\">\r\n\r\n          <div class=\"card flex justify-content-center mt-4\">\r\n            <p-tree [value]=\"mainMenuList\" [draggableNodes]=\"true\" [droppableNodes]=\"true\" draggableScope=\"self\"\r\n              droppableScope=\"self\" class=\"w-full md:w-30rem\" selectionMode=\"single\" [(selection)]=\"selectedFile\"\r\n              [validateDrop]=\"true\" (onNodeDrop)=\"nodeDrop($event)\"></p-tree>\r\n          </div>\r\n\r\n          <div class=\"mt-2\">\r\n            <button class=\"pull-right mb-2 btn btn-primary btncommon\" fieldKey=\"SETTINGS_ROL_ADD_ROLE\"\r\n              (click)=\"updateMenuOrder()\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <br />\r\n      </p-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"modal\" id=\"Deleteuser\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" *ngIf=\"deleteactive_user\">Delete Role</h5>\r\n        <h5 class=\"modal-title\" *ngIf=\"!deleteactive_user\">Warning - Role</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        {{ modalContent }}\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\" (click)=\"deleteRole()\"\r\n            *ngIf=\"deleteactive_user\">\r\n            Delete\r\n          </button>\r\n\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\"\r\n            *ngIf=\"deleteactive_buttonok\">\r\n            Cancel\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\"\r\n            *ngIf=\"!deleteactive_buttonok\">\r\n            OK\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".head-div{padding-top:9px;padding-left:7px}.bgiconsearch{margin-bottom:5px;padding-bottom:0;font-size:var(--font-13)}.useracess{border-radius:2px;padding:5px 0;max-height:calc(100vh - 227px);overflow-y:auto}.userempty{max-width:none;border-radius:50%;height:35px;width:35px}.row.userdata{margin:0;border-bottom:solid 1px var(--table-border);padding:5px 0;cursor:pointer}.overflow_txt{overflow:hidden;text-overflow:ellipsis}span.nameuser{font-size:var(--font-13);color:var(--label-text);font-weight:600}.userid,span.emailuser{font-size:var(--font-13);color:#838383}.heading_analysis{padding-bottom:0;border-bottom:1px solid var(--table-border)}.Customcheckbox{position:relative;padding-top:0;padding-left:10px}.heading_role{padding-left:10px;font-size:var(--font-13);top:-2px;position:relative;font-weight:700}.marginul_list{padding:0;margin:0}.marginul_list li{list-style:none;padding-top:5px}.marginul_list li label{color:var(--text-dark);text-transform:capitalize;font-size:var(--font-13)}.marginul_list.ecms_rolescroll{max-height:250px;overflow:auto;margin-bottom:20px}.ecms_rolescroll::-webkit-scrollbar{width:.5em;height:.5em}.ecms_rolescroll::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3)}.ecms_rolescroll::-webkit-scrollbar-thumb{background-color:#a9a9a9;outline:1px solid slategrey}.inner_childaccess{margin-top:9px;margin-left:3px;border-bottom:1px solid var(--table-border)}.inner_childaccess .heading_role{font-size:var(--font-13);font-weight:700}.Customcheckbox input{display:inline-block}.Customcheckbox:hover input~.checkmark{border:solid 2px #2196f3}.Customcheckbox input~.checkmark{display:none}.Customcheckbox input:checked~.checkmark{display:none;border:solid 2px #1db766;background-color:#1db766}.Customcheckbox input:checked~.checkmark:after{display:block}.Customcheckbox .checkmark:after{left:6px;top:2px;width:5px;height:10px;border:solid #ffffff;border-width:0 2px 2px 0;transform:rotate(45deg)}.custom-control-input:checked~.custom-control-label:before{color:#fff;border:#1db766!important;background:#1db766!important}.custom-control.custom-switch.toggleleft .custom-control-label{padding-top:3px;font-size:var(--font-13)}.custom-switch .custom-control-label:after{top:calc(.25rem + 3px)}.toggle .custom-control-input:checked~.custom-control-label:before{color:#fff;border:#1db766!important;background:#1db766!important}.toggle .custom-control-input~.custom-control-label:before{color:#fff;border:#8c8c8c;background:#8c8c8c}.toggle .custom-control-label:after{background-color:#fff}.custom-switch .custom-control-label:before{left:-2.25rem;width:1.75rem;pointer-events:all;border-radius:.5rem}.custom-control-label:before{position:absolute;top:.25rem;left:-1.5rem;display:block;width:1rem;height:18px;pointer-events:none;content:\"\";background-color:#fff;border:1px solid #adb5bd}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-label{position:relative;margin-bottom:0;vertical-align:top}.custom-control input[type=checkbox]+label:before{content:\"\"}.custom-switch{padding-left:3.25rem}.toggleleft{font-size:var(--font-13);font-weight:600;display:block;margin-top:-12px;padding-bottom:13px}.report_button{margin-top:27px}.head-div .heading{font-weight:600}.right-icons .fa{margin-top:3px;display:inline-block;z-index:9}.right-icons .fa-trash{font-size:18px}:host ::ng-deep .p-accordion .p-accordion-tab .p-accordion-header .p-accordion-header-link{background:var(--bg-light);color:var(--text-dark);border-color:var(--table-border)}:host ::ng-deep .p-accordion .p-accordion-tab .p-accordion-header:not(.p-highlight):not(.p-disabled):hover .p-accordion-header-link{background:var(--primary);color:var(--hover-text);border-color:var(--table-border)}:host ::ng-deep .p-accordion .p-accordion-tab .p-accordion-content{background:var(--bg-light);color:var(--text-dark);border-color:var(--table-border)}:host ::ng-deep .p-accordion .p-accordion-header:not(.p-disabled).p-highlight:hover .p-accordion-header-link{background:var(--primary);color:var(--hover-text);border-color:var(--table-border)}.adjusttop{margin-top:60px;margin-bottom:-24px}:host ::ng-deep .p-tree .p-treenode-droppoint.p-treenode-droppoint-active{border:1px solid #89c8f7;height:30px;background:none!important}.permission-filter{margin:20px 0 10px;position:relative}.permission-filter i{position:absolute;right:8px;top:50%;cursor:pointer;margin-top:-.5rem;color:#6c757d}:host ::ng-deep .policygroup-v2 .p-multiselect-token-label{width:100%}:host ::ng-deep .policygroup-accordion .policygroup-v2.p-multiselect .p-multiselect-panel{top:auto!important}\n"], components: [{ type: i6.AlertComponent, selector: "app-alert" }, { type: i7.Card, selector: "p-card", inputs: ["header", "subheader", "style", "styleClass"] }, { type: i8.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "virtualScroll", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "disabled", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear"] }, { type: i9.Accordion, selector: "p-accordion", inputs: ["multiple", "style", "styleClass", "expandIcon", "collapseIcon", "activeIndex"], outputs: ["onClose", "onOpen", "activeIndexChange"] }, { type: i9.AccordionTab, selector: "p-accordionTab", inputs: ["header", "disabled", "cache", "transitionOptions", "selected"], outputs: ["selectedChange"] }, { type: i10.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "autoZIndex", "baseZIndex", "filterBy", "virtualScroll", "itemSize", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "scrollHeight", "defaultLabel", "placeholder", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide"] }, { type: i11.TabMenu, selector: "p-tabMenu", inputs: ["model", "activeItem", "scrollable", "popup", "style", "styleClass"] }, { type: i12.Tree, selector: "p-tree", inputs: ["value", "selectionMode", "selection", "style", "styleClass", "contextMenu", "layout", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "metaKeySelection", "propagateSelectionUp", "propagateSelectionDown", "loading", "loadingIcon", "emptyMessage", "ariaLabel", "togglerAriaLabel", "ariaLabelledBy", "validateDrop", "filter", "filterBy", "filterMode", "filterPlaceholder", "filteredNodes", "filterLocale", "scrollHeight", "virtualScroll", "virtualNodeHeight", "minBufferPx", "maxBufferPx", "indentation", "trackBy"], outputs: ["selectionChange", "onNodeSelect", "onNodeUnselect", "onNodeExpand", "onNodeCollapse", "onNodeContextMenuSelect", "onNodeDrop", "onFilter"] }], directives: [{ type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i13.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i15.ShowFieldDirective, selector: "[showField]", inputs: ["showField"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i16.InputText, selector: "[pInputText]" }, { type: i17.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { type: i18.Tooltip, selector: "[pTooltip]", inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "pTooltip", "tooltipDisabled", "tooltipOptions"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: RolesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'roles',
                    templateUrl: './roles.component.html',
                    styleUrls: ['./roles.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.FormBuilder }, { type: i2.AlertService }, { type: i3.MicrostrategyService }, { type: i4.RbacService }, { type: i5.DataStoreService }, { type: i4.RbacService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGljcy1jb3JlL3JiYWMtcm9sZXMvc3JjL2xpYi9waWNzLXJiYWMtcm9sZXMvcm9sZXMvcm9sZXMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGljcy1jb3JlL3JiYWMtcm9sZXMvc3JjL2xpYi9waWNzLXJiYWMtcm9sZXMvcm9sZXMvcm9sZXMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBMEIsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBTWhFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRekQsTUFBTSxPQUFPLGNBQWM7SUE0RHpCLFlBQ0UsUUFBa0IsRUFDVixXQUF3QixFQUN4QixZQUEwQixFQUMxQixXQUFpQyxFQUNqQyxZQUF5QixFQUN6QixhQUErQixFQUMvQixpQkFBOEI7UUFMOUIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsZ0JBQVcsR0FBWCxXQUFXLENBQXNCO1FBQ2pDLGlCQUFZLEdBQVosWUFBWSxDQUFhO1FBQ3pCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQWE7UUFqRXhDLHNCQUFpQixHQUFZLEtBQUssQ0FBQztRQUNuQywwQkFBcUIsR0FBWSxLQUFLLENBQUM7UUFDdkMsYUFBUSxHQUFnQixFQUFFLENBQUM7UUFDM0IscUJBQWdCLEdBQWdCLEVBQUUsQ0FBQztRQUVuQyw2QkFBd0IsR0FBcUQs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QUFxQixDQUFDLENBQUM7U0FDaEQ7SUFDSCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDckUsQ0FBQzs7NEdBenhCVSxjQUFjO2dHQUFkLGNBQWMsNkNDbkIzQiwycmxCQWlWTTs0RkQ5VE8sY0FBYztrQkFMMUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsT0FBTztvQkFDakIsV0FBVyxFQUFFLHdCQUF3QjtvQkFDckMsU0FBUyxFQUFFLENBQUMsd0JBQXdCLENBQUM7aUJBQ3RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3RvciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IE1lbnVJdGVtIH0gZnJvbSAncHJpbWVuZy9hcGkvbWVudWl0ZW0nO1xyXG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gJ3ByaW1lbmcvYXBpL3RyZWVub2RlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEFwcENvbnN0YW50cyB9IGZyb20gJy4uL0Bjb3JlL2NvbnN0YW50cy9hcHAtY29uc3RhbnRzJztcclxuaW1wb3J0IHsgTGFuZGluZ1BhZ2VNb2RlbCwgUm9sZU1vZGVsLCBVc2VyUm9sZUR0byB9IGZyb20gJy4uL0Bjb3JlL2RhdGFtb2RlbC9yYmFjRGF0YU1vZGVsJztcclxuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vQGNvcmUvc2VydmljZS9hbGVydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGF0YVN0b3JlU2VydmljZSB9IGZyb20gJy4uL0Bjb3JlL3NlcnZpY2UvZGF0YS1zdG9yZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTWljcm9zdHJhdGVneVNlcnZpY2UgfSBmcm9tICcuLi9AY29yZS9zZXJ2aWNlL21pY3Jvc3RyYXRlZ3kuc2VydmljZSc7XHJcbmltcG9ydCB7IFJiYWNTZXJ2aWNlIH0gZnJvbSAnLi4vQGNvcmUvc2VydmljZS9yYmFjLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSQkFDSU5GTyB9IGZyb20gJy4uL0Bjb3JlL3VybHMvcmJhYy11cmwuY29uZmlnJztcclxuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5kZWNsYXJlIGNvbnN0ICQ6IGFueTtcclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdyb2xlcycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3JvbGVzLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9yb2xlcy5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSb2xlc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgcm9sZUlkITogbnVtYmVyO1xyXG4gIGRlbGV0ZWFjdGl2ZV91c2VyOiBib29sZWFuID0gZmFsc2U7XHJcbiAgZGVsZXRlYWN0aXZlX2J1dHRvbm9rOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcm9sZUxpc3Q6IFJvbGVNb2RlbFtdID0gW107XHJcbiAgZmlsdGVyZWRSb2xlTGlzdDogUm9sZU1vZGVsW10gPSBbXTtcclxuICBpc0Rpc2FibGVkITogYm9vbGVhbjtcclxuICBzZWxlY3RlZFBlcm1pc3Npb25zR3JvdXA6IHsgaWQ6IG51bWJlcjsgYWxsb3c6IGJvb2xlYW47IHdyaXRlOiBib29sZWFuIH1bXSA9IFtdO1xyXG4gIHVzZXJyb2xlczogVXNlclJvbGVEdG9bXSA9IFtdO1xyXG4gIGlzRGlzYWJsZWRPdGhlciE6IGJvb2xlYW47XHJcbiAgZGVsZXRlZElkITogc3RyaW5nO1xyXG4gIG1vZGVsUm9sZU5hbWU6IHN0cmluZyA9ICcnO1xyXG4gIHJvbGVGb3JtITogRm9ybUdyb3VwO1xyXG4gIGZvcm1TdWJtaXQhOiBib29sZWFuO1xyXG4gIHBlcm1pc3Npb25zOiBBcnJheTxhbnk+ID0gW107XHJcbiAgZmlsdGVyUGVybWlzc2lvbnM6IGFueVtdID0gW107XHJcbiAgbGFuZGluZ1BhZ2U6IExhbmRpbmdQYWdlTW9kZWxbXSA9IFtdO1xyXG4gIHBvbGljeUdyb3VwTGlzdDogYW55O1xyXG4gIHBlcm1pc3Npb25BbGxvdyE6IGJvb2xlYW47XHJcbiAgb3JnSWQ6IGFueTtcclxuICByZXBvcnREYXNoYm9hcmRMaXN0OiBhbnk7XHJcbiAgZHVwbGljYXRlcmVwb3J0RGFzaGJvYXJkTGlzdDogYW55O1xyXG4gIGVudmlyb25tZW50OiBhbnk7XHJcbiAgUkJBQ09SRzogUkJBQ0lORk8gPSBuZXcgUkJBQ0lORk8oKTtcclxuICBvcmdTdWJzITogU3Vic2NyaXB0aW9uO1xyXG4gIG1vZGFsQ29udGVudDogc3RyaW5nO1xyXG4gIGl0ZW1zOiBNZW51SXRlbVtdID0gW107XHJcbiAgYWN0aXZlSXRlbSE6IE1lbnVJdGVtO1xyXG4gIGZpcnN0VGFiITogYm9vbGVhbjtcclxuICBtYWluTWVudUxpc3Q6IGFueSA9IFtdO1xyXG4gIHJlQXJyYW5nZWRMaXN0OiBhbnkgPSBbXTtcclxuICBkdWJsaWNhdGVMYW5kaW5nUGFnZTogYW55W10gPSBbXTtcclxuICBtZW51TGlzdDogYW55ID0gW107XHJcbiAgc3ViTWVudUxpc3Q6IGFueSA9IFtdO1xyXG4gIHBhcmVudDogYW55ID0gW107XHJcbiAgY2hpbGRNZW51TGlzdDogYW55ID0gW107XHJcbiAgc2hvd0NoaWxkcmVuOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcGFyZW50TWVudWxpc3Q6IFRyZWVOb2RlW10gPSBbXTtcclxuICBzZWxlY3RlZEZpbGU6IFRyZWVOb2RlO1xyXG4gIGh0dHBTZXJ2aWNlOiBhbnk7XHJcbiAgdmFsaWRhdGlvbkVycm9yczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG4gIGlucHV0VmFsaWRhdGlvbk1ldGhvZDogYW55O1xyXG4gIHBvbGljeUdyb3Vwc0xlbmd0aDogYW55O1xyXG4gIGVuYWJsZUJ1dHRvbjogYm9vbGVhbjtcclxuICBjaGVja2VkUm9sZXNBcnI6IGFueSA9IFtdO1xyXG5cclxuICBidWlsZFRyZWUgPSAocGFyZW50SWQpID0+IChpdGVtKSA9PiB7XHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMubWVudUxpc3QuZmlsdGVyKChjaGlsZCkgPT4gY2hpbGQucGFyZW50aWQgPT09IGl0ZW0uaWQpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uaXRlbSxcclxuICAgICAgLi4uKGNoaWxkcmVuLmxlbmd0aCA+IDAgJiYgeyBjaGlsZHJlbjogY2hpbGRyZW4ubWFwKHRoaXMuYnVpbGRUcmVlKGl0ZW0uaWQpKSB9KSxcclxuICAgIH07XHJcbiAgfTtcclxuICBvcmlnaW5hbFBlcm1pc3Npb25zOiBBcnJheTxhbnk+ID0gW107XHJcblxyXG5cclxuICBuZXN0ZWREYXRhKCkge1xyXG4gICAgdGhpcy5tYWluTWVudUxpc3QgPSB0aGlzLm1lbnVMaXN0LmZpbHRlcigoaXRlbSkgPT4gIWl0ZW0ucGFyZW50aWQpLm1hcCh0aGlzLmJ1aWxkVHJlZShudWxsKSlcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIsXHJcbiAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBtc3RyU2VydmljZTogTWljcm9zdHJhdGVneVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJvbGVzU2VydmljZTogUmJhY1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIF9zdG9yZXNlcnZpY2U6IERhdGFTdG9yZVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHBlcm1pc3Npb25TZXJ2aWNlOiBSYmFjU2VydmljZVxyXG4gICkge1xyXG4gICAgdGhpcy5mb3JtU3VibWl0ID0gZmFsc2U7XHJcbiAgICB0aGlzLm9yZ1N1YnMgPSB0aGlzLl9zdG9yZXNlcnZpY2UuY3VycmVudFN0b3JlLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IHtcclxuICAgICAgdGhpcy5pbnB1dFZhbGlkYXRpb25NZXRob2QgPSByZXNbJ0lOUFVUVkFMSURBVElPTk1FVEhPRCddXHJcbiAgICAgIGlmIChyZXNbJ1JCQUNPUkcnXSAmJiByZXNbJ1JCQUNPUkcnXSAhPT0gJycpIHtcclxuICAgICAgICB0aGlzLmZvcm1TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBlcm1pc3Npb25BbGxvdyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuUkJBQ09SRyA9IHJlc1snUkJBQ09SRyddO1xyXG4gICAgICAgIHRoaXMuZW52aXJvbm1lbnQgPSB0aGlzLlJCQUNPUkdbJ2Vudmlyb25tZW50J107XHJcbiAgICAgICAgdGhpcy5vcmdJZCA9IHBhcnNlSW50KHRoaXMuUkJBQ09SR1snb3JnSUQnXSk7XHJcbiAgICAgICAgdGhpcy5odHRwU2VydmljZSA9IHJlc1snSFRUUFNFUlZJQ0UnXVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5pbml0aWFsaXplZm9ybSgpO1xyXG4gICAgdGhpcy5nZXRSZXBvcnREYXNoYm9hcmQoKTtcclxuICAgIHRoaXMuZ2V0Um9sZUxpc3QoKTtcclxuICAgIHRoaXMuZ2V0UG9saWN5R3JvdXBMaXN0KCk7XHJcbiAgICB0aGlzLmdldExhbmRpbmdQYWdlKCk7XHJcbiAgICB0aGlzLmdldFRhYnMoKTtcclxuXHJcbiAgICB0aGlzLnJvbGVGb3JtLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLmVuYWJsZUJ1dHRvbiA9IHRoaXMuaXNBbnlGb3JtQ29udHJvbFdpdGhWYWx1ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpc0FueUZvcm1Db250cm9sV2l0aFZhbHVlKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgZm9ybVZhbHVlID0gdGhpcy5yb2xlRm9ybS52YWx1ZTtcclxuICAgIGNvbnN0IGF2b2lkUHJvcGVydGllcyA9IFsncGFyZW50aWQnXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmb3JtVmFsdWUpIHtcclxuICAgICAgaWYgKGZvcm1WYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFhdm9pZFByb3BlcnRpZXMuaW5jbHVkZXMoa2V5KSAmJiBmb3JtVmFsdWVba2V5XSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMub3JnU3Vicy51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxuICBpbml0aWFsaXplZm9ybSgpIHtcclxuICAgIHRoaXMucm9sZUZvcm0gPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcclxuICAgICAgbmFtZTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgZGVmYXVsdHBhZ2VpZDogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgcGFyZW50aWQ6IFsyXSxcclxuICAgICAgcG9saWN5R3JvdXBJZDogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgZG9zc2llcmlkOiBbXVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXQgZm9ybVZhbGlkYXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucm9sZUZvcm0uY29udHJvbHM7XHJcbiAgfVxyXG5cclxuICBvbklucHV0KGV2ZW50OiBFdmVudCwgZmllbGR0eXBlOiBhbnksIGxhYmVsOiBhbnksIHJlcXVpcmVkOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBlcnJvciA9IHRoaXMuaW5wdXRWYWxpZGF0aW9uTWV0aG9kKGV2ZW50LCBmaWVsZHR5cGUsIGxhYmVsLCByZXF1aXJlZCk7XHJcbiAgICBpZiAoZXJyb3IgJiYgdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnNbbGFiZWxdID0gZXJyb3I7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkZWxldGUgdGhpcy52YWxpZGF0aW9uRXJyb3JzW2xhYmVsXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldExhbmRpbmdQYWdlKCkge1xyXG4gICAgdGhpcy5yb2xlc1NlcnZpY2UuZ2V0TGFuZGluZ1BhZ2UoJzEnKS5zdWJzY3JpYmUoXHJcbiAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXMpIHtcclxuICAgICAgICAgIHRoaXMubGFuZGluZ1BhZ2UgPSByZXNbJ2RhdGEnXS5maWx0ZXIoKHg6IGFueSkgPT4geC5yb3V0ZS5jaGFyQXQoMCkgPT09ICcvJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZHVibGljYXRlTGFuZGluZ1BhZ2UgPSBbLi4udGhpcy5sYW5kaW5nUGFnZV07XHJcbiAgICAgIH0sXHJcbiAgICAgIChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZXRSb2xlTGlzdChfa2V5Pzogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnJvbGVzU2VydmljZS5nZXRBbGxVc2VyUm9sZSh0aGlzLm9yZ0lkKS5zdWJzY3JpYmUoXHJcbiAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMucm9sZUxpc3QgPSByZXNbJ2RhdGEnXS5maWx0ZXIoKGE6IGFueSkgPT4gYS5uYW1lICE9PSAnU3VwZXIgYWRtaW4nKTtcclxuICAgICAgICB0aGlzLmZpbHRlcmVkUm9sZUxpc3QgPSB0aGlzLnJvbGVMaXN0O1xyXG4gICAgICB9LFxyXG4gICAgICAoZXJyOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZXRQb2xpY3lHcm91cExpc3QoX21hbmFnZW1lbnRHcm91cElkPzogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnJvbGVzU2VydmljZS5nZXRPcmdQb2xpY3lHcm91cExpc3QodGhpcy5vcmdJZCkuc3Vic2NyaWJlKFxyXG4gICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLnBvbGljeUdyb3VwTGlzdCA9IHJlc1snZGF0YSddO1xyXG4gICAgICB9LFxyXG4gICAgICAoZXJyOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycilcclxuICAgICk7XHJcbiAgfVxyXG4gIGNsZWFyU2VhcmNoKGV2ZW50OiBFdmVudCkge1xyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0tY29udHJvbCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBpZiAoaW5wdXRFbGVtZW50KSB7XHJcbiAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9ICcnO1xyXG4gICAgICB0aGlzLmZpbHRlcmVkUm9sZUxpc3QgPSB0aGlzLnJvbGVMaXN0O1xyXG4gICAgfVxyXG4gIH1cclxuICBvbkNsaWNrQWRkUm9sZSgpIHtcclxuICAgIHRoaXMuZW5hYmxlQnV0dG9uID0gZmFsc2U7XHJcbiAgICB0aGlzLnJvbGVGb3JtLnJlc2V0KCk7XHJcbiAgICB0aGlzLmZvcm1TdWJtaXQgPSBmYWxzZTtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZWZvcm0oKTtcclxuICAgIHRoaXMucm9sZUZvcm0udmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuZW5hYmxlQnV0dG9uID0gdGhpcy5pc0FueUZvcm1Db250cm9sV2l0aFZhbHVlKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMucGVybWlzc2lvbkFsbG93ID0gZmFsc2U7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25zID0gW107XHJcbiAgICB0aGlzLmZpbHRlclBlcm1pc3Npb25zID0gW107XHJcbiAgICB0aGlzLnJvbGVJZCA9IDA7XHJcbiAgICB0aGlzLmZpcnN0VGFiID0gdHJ1ZTtcclxuICAgIHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IHt9O1xyXG4gICAgdGhpcy5wb2xpY3lHcm91cHNMZW5ndGggPSAwO1xyXG4gIH1cclxuICBzZWFyY2hSb2xlKGV2ZW50OiBFdmVudCkge1xyXG4gICAgY29uc3QgdmFsdWUgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB0aGlzLmZpbHRlcmVkUm9sZUxpc3QgPSB0aGlzLnJvbGVMaXN0LmZpbHRlcihhID0+IGE/Lm5hbWU/LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh2YWx1ZSkpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJQZXJtaXNzaW9uKGV2ZW50PzogRXZlbnQpIHtcclxuICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbGVhcmJveCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBpZiAoaW5wdXRFbGVtZW50KSB7XHJcbiAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9ICcnO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wZXJtaXNzaW9ucyA9IHRoaXMub3JpZ2luYWxQZXJtaXNzaW9uc1xyXG4gIH1cclxuXHJcbiAgc2VhcmNoUm9sZVBlcm1pc3Npb24oZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgIHRoaXMucGVybWlzc2lvbnMgPSB0aGlzLm9yaWdpbmFsUGVybWlzc2lvbnMuZmlsdGVyKGEgPT4gYT8uZGVzY3JpcHRpb24/LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh2YWx1ZSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGFicygpIHtcclxuICAgIHRoaXMuaXRlbXMgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICBsYWJlbDogJ1Blcm1pc3Npb25zJyxcclxuICAgICAgICBpY29uOiAnJyxcclxuICAgICAgICBjb21tYW5kOiBldmVudCA9PiB7XHJcbiAgICAgICAgICB0aGlzLmFjdGl2YXRlTWVudShldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbGFiZWw6ICdNZW51IE9yZGVyaW5nJyxcclxuICAgICAgICBpY29uOiAnJyxcclxuICAgICAgICBjb21tYW5kOiBldmVudCA9PiB7XHJcbiAgICAgICAgICB0aGlzLmFjdGl2YXRlTWVudShldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG4gICAgdGhpcy5hY3RpdmVJdGVtID0gdGhpcy5pdGVtc1swXTtcclxuICAgIHRoaXMuZmlyc3RUYWIgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Um9sZUluZm8ocm9sZWlkOiBhbnkpIHtcclxuICAgIHRoaXMuZm9ybVN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgdGhpcy52YWxpZGF0aW9uRXJyb3JzID0ge307XHJcbiAgICB0aGlzLmNsZWFyUGVybWlzc2lvbigpO1xyXG4gICAgdGhpcy5kdWJsaWNhdGVMYW5kaW5nUGFnZSA9IHRoaXMubGFuZGluZ1BhZ2U7XHJcbiAgICB0aGlzLnJvbGVJZCA9IHJvbGVpZDtcclxuICAgIGlmIChyb2xlaWQpIHtcclxuICAgICAgdGhpcy5pc0Rpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgdGhpcy5nZXRUYWJzKCk7XHJcbiAgICAgIHRoaXMucm9sZXNTZXJ2aWNlLmdldFJvbGVCeUlkKHJvbGVpZCkuc3Vic2NyaWJlKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbkFsbG93ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJvbGVJbmZvcm1hdGlvbihyZXMpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0UG9saWN5R3JvdXAoKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJvbGVGb3JtLnJlc2V0KCk7XHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnMgPSBbXTtcclxuICAgICAgdGhpcy5pc0Rpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuaXNEaXNhYmxlZE90aGVyID0gZmFsc2U7XHJcbiAgICAgIHRoaXMucm9sZUZvcm0uZW5hYmxlKCk7XHJcbiAgICAgIHRoaXMucG9saWN5R3JvdXBzTGVuZ3RoID0gMFxyXG4gICAgfVxyXG4gIH1cclxuICByb2xlSW5mb3JtYXRpb24ocmVzOiBhbnkpIHtcclxuICAgIHRoaXMucm9sZUZvcm0ucGF0Y2hWYWx1ZSh7XHJcbiAgICAgIG5hbWU6IHJlcy5kYXRhLm5hbWUsXHJcbiAgICAgIGRlZmF1bHRwYWdlaWQ6IHJlcy5kYXRhLmRlZmF1bHRwYWdlaWQsXHJcbiAgICAgIHBhcmVudGlkOiByZXMuZGF0YS5wYXJlbnRpZCxcclxuICAgICAgcG9saWN5R3JvdXBJZDpcclxuICAgICAgICByZXM/LmRhdGE/LnBvbGljeUdyb3Vwc1xyXG4gICAgICAgICAgLmZpbHRlcigoaXRlbTogYW55KSA9PiBpdGVtKVxyXG4gICAgICAgICAgLm1hcCgoaXRlbTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtWydpZCddO1xyXG4gICAgICAgICAgfSkgfHwgW10sXHJcbiAgICAgIGRvc3NpZXJpZDogSlNPTi5wYXJzZShyZXMuZGF0YS5kb3NzaWVyaWQpPy5pZFxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25zID0gWy4uLnJlcz8uZGF0YT8ucGVybWlzc2lvbnNdO1xyXG4gICAgdGhpcy5maWx0ZXJQZXJtaXNzaW9ucyA9IHRoaXMucGVybWlzc2lvbnM7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25zID0gdGhpcy5wZXJtaXNzaW9uc1xyXG4gICAgICAubWFwKGYgPT4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgaXNGb3JtQnVpbGRlcjogZmFsc2UgfSwgZik7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5tYXAoZyA9PiB7XHJcbiAgICAgICAgaWYgKGcua2V5ID09PSAnRk9STScpIHtcclxuICAgICAgICAgIGcuaXNGb3JtQnVpbGRlciA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGcuaXNGb3JtQnVpbGRlciA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZztcclxuICAgICAgfSk7XHJcbiAgICB0aGlzLnNlbGVjdGVkUGVybWlzc2lvbnNHcm91cCA9IFtdO1xyXG4gICAgaWYgKHJlcy5kYXRhLnBlcm1pc3Npb25zICYmIHJlcy5kYXRhLnBlcm1pc3Npb25zLmxlbmd0aCkge1xyXG4gICAgICByZXMuZGF0YS5wZXJtaXNzaW9ucy5mb3JFYWNoKChlbGU6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMuZ2V0U2VsZWN0ZWRQZXJtaXNpb25zKGVsZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vcmlnaW5hbFBlcm1pc3Npb25zID0gdGhpcy5wZXJtaXNzaW9ucztcclxuICAgIHRoaXMuaXNEaXNhYmxlZE90aGVyID0gIXRoaXMuaGFzQWNjZXNzO1xyXG4gICAgY29uc3QgaXNBZG1pbiA9IHRoaXMudXNlcnJvbGVzLmZpbmQoKHsgbmFtZSB9KSA9PiBuYW1lID09PSAnQWRtaW4nKTtcclxuICAgIGlmIChpc0FkbWluKSB7XHJcbiAgICAgIHRoaXMucm9sZUZvcm0uZW5hYmxlKCk7XHJcbiAgICAgIHRoaXMuaXNEaXNhYmxlZE90aGVyID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBlbHNlIGlmICghdGhpcy5oYXNBY2Nlc3MgfHwgcmVzLmlzcmVhZG9ubHkpIHtcclxuICAgIC8vICAgdGhpcy5yb2xlRm9ybS5jb250cm9sc1snbmFtZSddLmRpc2FibGUoKTtcclxuICAgIC8vIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnJvbGVGb3JtLmVuYWJsZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICBnZXQgaGFzQWNjZXNzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlcnJvbGVzLmZpbmQoKHsgaWQsIG5hbWUgfSkgPT4gaWQgPT09IHRoaXMucm9sZUlkIHx8IG5hbWUgPT09ICdBZG1pbicpO1xyXG4gIH1cclxuXHJcbiAgaXNQcml2aWxhZ2UocGVybWlzc2lvbjogYW55KSB7XHJcbiAgICBpZiAocGVybWlzc2lvbiAmJiBwZXJtaXNzaW9uPy5wZXJtaXNzaW9ucyAmJiBwZXJtaXNzaW9uPy5wZXJtaXNzaW9ucz8ubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNlbGVjdEFsbFBhZ2UoaW5kZXg6IG51bWJlciwgZXZlbnQ6IGFueSkge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25zW2luZGV4XS5jaGVja2VkID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XHJcbiAgICB0aGlzLnNldFNlbGVjdGVkUGVybWlzaW9ucyhcclxuICAgICAgZXZlbnQudGFyZ2V0LmNoZWNrZWQsXHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbaW5kZXhdLmlkLFxyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW2luZGV4XS5jaGVja2VkLFxyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW2luZGV4XS5jaGVja2Vkd3JpdGVcclxuICAgICk7XHJcbiAgICB0aGlzLmNoZWNrZWRSb2xlc0FyciA9IHRoaXMucGVybWlzc2lvbnMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmNoZWNrZWQgPT09IHRydWUpO1xyXG4gICAgdGhpcy5wZXJtaXNzaW9uc1tpbmRleF0ucGVybWlzc2lvbnMuZm9yRWFjaCgocGFnZTogYW55KSA9PiB7XHJcbiAgICAgIHBhZ2UuY2hlY2tlZCA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xyXG4gICAgICBwYWdlLmNoZWNrZWR3cml0ZSA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xyXG4gICAgICB0aGlzLnNldFNlbGVjdGVkUGVybWlzaW9ucyhldmVudC50YXJnZXQuY2hlY2tlZCwgcGFnZS5pZCwgcGFnZS5jaGVja2VkLCBwYWdlLmNoZWNrZWR3cml0ZSk7XHJcbiAgICAgIHBhZ2UucGVybWlzc2lvbnMuZm9yRWFjaCgocHJpdmlsZWdlOiBhbnkpID0+IHtcclxuICAgICAgICBwcml2aWxlZ2UuY2hlY2tlZCA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xyXG4gICAgICAgIHByaXZpbGVnZS5jaGVja2Vkd3JpdGUgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcclxuICAgICAgICB0aGlzLnNldFNlbGVjdGVkUGVybWlzaW9ucyhldmVudC50YXJnZXQuY2hlY2tlZCwgcHJpdmlsZWdlLmlkLCBwcml2aWxlZ2UuY2hlY2tlZCwgcHJpdmlsZWdlLmNoZWNrZWR3cml0ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRTZWxlY3RlZFBlcm1pc2lvbnMoaXRlbTogYW55KSB7XHJcbiAgICB0aGlzLnNldFNlbGVjdGVkUGVybWlzaW9ucyhpdGVtLmNoZWNrZWQsIGl0ZW0uaWQsIGl0ZW0uY2hlY2tlZCwgaXRlbS5jaGVja2Vkd3JpdGUpO1xyXG4gICAgaWYgKGl0ZW0ucGVybWlzc2lvbnMgJiYgaXRlbS5wZXJtaXNzaW9ucy5sZW5ndGgpIHtcclxuICAgICAgaXRlbS5wZXJtaXNzaW9ucy5mb3JFYWNoKChwYWdlOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLnNldFNlbGVjdGVkUGVybWlzaW9ucyhwYWdlLmNoZWNrZWQsIHBhZ2UuaWQsIHBhZ2UuY2hlY2tlZCwgcGFnZS5jaGVja2Vkd3JpdGUpO1xyXG4gICAgICAgIGlmIChwYWdlICYmIHBhZ2UucGVybWlzc2lvbnM/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgcGFnZS5wZXJtaXNzaW9ucy5mb3JFYWNoKChwcml2aWxlZ2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkUGVybWlzaW9ucyhwcml2aWxlZ2UuY2hlY2tlZCwgcHJpdmlsZWdlLmlkLCBwcml2aWxlZ2UuY2hlY2tlZCwgcHJpdmlsZWdlLmNoZWNrZWR3cml0ZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2VsZWN0QWxsUHJpdmlsYWdlKHBhZ2VJbmRleDogbnVtYmVyLCBwZXJtaXNzaW9uSW5kZXg6IG51bWJlciwgZXZlbnQ6IGFueSkge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0uY2hlY2tlZCA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xyXG4gICAgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gJ3JlYWQnIHx8IGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gJ29uJykge1xyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5jaGVja2VkID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID09PSAnd3JpdGUnKSB7XHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWR3cml0ZSA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTZWxlY3RlZFBlcm1pc2lvbnMoXHJcbiAgICAgIGV2ZW50LnRhcmdldC5jaGVja2VkLFxyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5pZCxcclxuICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0uY2hlY2tlZCxcclxuICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0uY2hlY2tlZHdyaXRlXHJcbiAgICApO1xyXG4gICAgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gJ3JlYWQnIHx8IGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gJ29uJykge1xyXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQgfHwgIWV2ZW50LnRhcmdldC5jaGVja2VkKSB7XHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0ucGVybWlzc2lvbnMuZm9yRWFjaCgocGFnZTogYW55KSA9PiB7XHJcbiAgICAgICAgICBwYWdlLmNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcclxuICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRQZXJtaXNpb25zKGV2ZW50LnRhcmdldC5jaGVja2VkLCBwYWdlLmlkLCBwYWdlLmNoZWNrZWQsIHBhZ2UuY2hlY2tlZHdyaXRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQudmFsdWUgPT09ICd3cml0ZScpIHtcclxuICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkKSB7XHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0ucGVybWlzc2lvbnMuZm9yRWFjaCgocGFnZTogYW55KSA9PiB7XHJcbiAgICAgICAgICBwYWdlLmNoZWNrZWR3cml0ZSA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xyXG4gICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZFBlcm1pc2lvbnMoZXZlbnQudGFyZ2V0LmNoZWNrZWQsIHBhZ2UuaWQsIHBhZ2UuY2hlY2tlZCwgcGFnZS5jaGVja2Vkd3JpdGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmdldFBhZ2VDaGVja2VkKHBhZ2VJbmRleCk7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RQYWdlKHBhZ2VJbmRleDogbnVtYmVyLCBwZXJtaXNzaW9uSW5kZXg6IG51bWJlciwgZXZlbnQ6IGFueSkge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID09PSAnd3JpdGUnKSB7XHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWR3cml0ZSA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xyXG4gICAgfVxyXG4gICAgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gJ3JlYWQnKSB7XHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0U2VsZWN0ZWRQZXJtaXNpb25zKFxyXG4gICAgICBldmVudC50YXJnZXQuY2hlY2tlZCxcclxuICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0uaWQsXHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWQsXHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWR3cml0ZVxyXG4gICAgKTtcclxuICAgIHRoaXMuZ2V0UGFnZUNoZWNrZWQocGFnZUluZGV4KTtcclxuICB9XHJcblxyXG4gIHNlbGVjdFByaXZpbGVnZShwYWdlSW5kZXg6IG51bWJlciwgcGVybWlzc2lvbkluZGV4OiBudW1iZXIsIHByaXZpbGVnZUluZGV4OiBudW1iZXIsIGV2ZW50OiBhbnkpIHtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gJ3dyaXRlJykge1xyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5wZXJtaXNzaW9uc1twcml2aWxlZ2VJbmRleF0uY2hlY2tlZHdyaXRlID1cclxuICAgICAgICBldmVudC50YXJnZXQuY2hlY2tlZDtcclxuICAgIH1cclxuICAgIGlmIChldmVudC50YXJnZXQudmFsdWUgPT09ICdyZWFkJyB8fCBldmVudC50YXJnZXQudmFsdWUgPT09ICdvbicpIHtcclxuICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0ucGVybWlzc2lvbnNbcHJpdmlsZWdlSW5kZXhdLmNoZWNrZWQgPVxyXG4gICAgICAgIGV2ZW50LnRhcmdldC5jaGVja2VkO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTZWxlY3RlZFBlcm1pc2lvbnMoXHJcbiAgICAgIGV2ZW50LnRhcmdldC5jaGVja2VkLFxyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5wZXJtaXNzaW9uc1twcml2aWxlZ2VJbmRleF0uaWQsXHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLnBlcm1pc3Npb25zW3ByaXZpbGVnZUluZGV4XS5jaGVja2VkLFxyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5wZXJtaXNzaW9uc1twcml2aWxlZ2VJbmRleF0uY2hlY2tlZHdyaXRlXHJcbiAgICApO1xyXG4gICAgdGhpcy5nZXRQcml2aWxhZ2VDaGVja2VkKHBhZ2VJbmRleCwgcGVybWlzc2lvbkluZGV4KTtcclxuICAgIHRoaXMuZ2V0UGFnZUNoZWNrZWQocGFnZUluZGV4KTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VDaGVja2VkKHBhZ2VJbmRleDogbnVtYmVyKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5jaGVja2VkICE9PSB0aGlzLmdldENoZWNrZWQodGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zKSAmJlxyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0uY2hlY2tlZHdyaXRlICE9PSB0aGlzLmdldENoZWNrZWRXcml0ZSh0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnMpXHJcbiAgICApIHtcclxuICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLmNoZWNrZWQgPSB0aGlzLmdldENoZWNrZWQodGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zKTtcclxuICAgICAgdGhpcy5zZXRTZWxlY3RlZFBlcm1pc2lvbnMoXHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLmNoZWNrZWQsXHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLmlkLFxyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5jaGVja2VkLFxyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5jaGVja2Vkd3JpdGVcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFByaXZpbGFnZUNoZWNrZWQocGFnZUluZGV4OiBudW1iZXIsIHBlcm1pc3Npb25JbmRleDogbnVtYmVyKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWQgIT09XHJcbiAgICAgIHRoaXMuZ2V0Q2hlY2tlZCh0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5wZXJtaXNzaW9ucylcclxuICAgICkge1xyXG4gICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5jaGVja2VkID0gdGhpcy5nZXRDaGVja2VkKFxyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLnBlcm1pc3Npb25zXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuc2V0U2VsZWN0ZWRQZXJtaXNpb25zKFxyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWQsXHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0uaWQsXHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0uY2hlY2tlZCxcclxuICAgICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5jaGVja2Vkd3JpdGVcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWR3cml0ZSAhPT1cclxuICAgICAgdGhpcy5nZXRDaGVja2VkV3JpdGUodGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0ucGVybWlzc2lvbnMpXHJcbiAgICApIHtcclxuICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0uY2hlY2tlZHdyaXRlID0gdGhpcy5nZXRDaGVja2VkV3JpdGUoXHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0ucGVybWlzc2lvbnNcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5zZXRTZWxlY3RlZFBlcm1pc2lvbnMoXHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1twYWdlSW5kZXhdLnBlcm1pc3Npb25zW3Blcm1pc3Npb25JbmRleF0uY2hlY2tlZCxcclxuICAgICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5pZCxcclxuICAgICAgICB0aGlzLnBlcm1pc3Npb25zW3BhZ2VJbmRleF0ucGVybWlzc2lvbnNbcGVybWlzc2lvbkluZGV4XS5jaGVja2VkLFxyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnNbcGFnZUluZGV4XS5wZXJtaXNzaW9uc1twZXJtaXNzaW9uSW5kZXhdLmNoZWNrZWR3cml0ZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2VsZWN0QWxsQWNjZXNzKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRoaXMuY2hlY2tlZFJvbGVzQXJyID0gW11cclxuICAgIH1cclxuICAgIHRoaXMucGVybWlzc2lvbnMuZm9yRWFjaCgocGFnZTogYW55KSA9PiB7XHJcbiAgICAgIHBhZ2UuY2hlY2tlZCA9IHZhbHVlO1xyXG4gICAgICB0aGlzLnNldFNlbGVjdGVkUGVybWlzaW9ucyh2YWx1ZSwgcGFnZS5pZCwgcGFnZS5jaGVja2VkLCBwYWdlLmNoZWNrZWR3cml0ZSk7XHJcbiAgICAgIGlmIChwYWdlICYmIHBhZ2UucGVybWlzc2lvbnMpIHtcclxuICAgICAgICBwYWdlLnBlcm1pc3Npb25zLmZvckVhY2goKHBlcm1pc3Npb246IGFueSkgPT4ge1xyXG4gICAgICAgICAgcGVybWlzc2lvbi5jaGVja2VkID0gdmFsdWU7XHJcbiAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkUGVybWlzaW9ucyh2YWx1ZSwgcGVybWlzc2lvbi5pZCwgcGVybWlzc2lvbi5jaGVja2VkLCBwZXJtaXNzaW9uLmNoZWNrZWR3cml0ZSk7XHJcbiAgICAgICAgICBpZiAocGVybWlzc2lvbiAmJiBwZXJtaXNzaW9uLnBlcm1pc3Npb25zPy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcGVybWlzc2lvbi5wZXJtaXNzaW9ucy5mb3JFYWNoKChwcml2aWxlZ2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIHByaXZpbGVnZS5jaGVja2VkID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgcHJpdmlsZWdlLmNoZWNrZWR3cml0ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRQZXJtaXNpb25zKHZhbHVlLCBwcml2aWxlZ2UuaWQsIHByaXZpbGVnZS5jaGVja2VkLCBwcml2aWxlZ2UuY2hlY2tlZHdyaXRlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkTmV3Um9sZShpZDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25zID0gW107XHJcbiAgICB0aGlzLmZvcm1TdWJtaXQgPSBmYWxzZTtcclxuICAgIHRoaXMucGVybWlzc2lvbkFsbG93ID0gZmFsc2U7XHJcbiAgICB0aGlzLnJvbGVzU2VydmljZS5nZXRQZXJtaXNzaW9uUm9sZUJ5SWQoaWQpLnN1YnNjcmliZShcclxuICAgICAgKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uQWxsb3cgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnMgPSByZXNbJ2RhdGEnXTtcclxuICAgICAgfSxcclxuICAgICAgKGVycjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnIpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0U2VsZWN0ZWRQZXJtaXNpb25zKF9zZWxlY3RlZDogYm9vbGVhbiwgaWQ6IG51bWJlciwgYWxsb3c6IGJvb2xlYW4sIHdyaXRlOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc2VsZWN0ZWRQZXJtaXNzaW9uc0dyb3VwLmZpbmRJbmRleChyZXMgPT4gcmVzLmlkID09PSBpZCk7XHJcbiAgICBpZiAoaW5kZXggPT09IC0xICYmIGFsbG93KSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRQZXJtaXNzaW9uc0dyb3VwLnB1c2goeyBpZCwgYWxsb3csIHdyaXRlIH0pO1xyXG4gICAgfSBlbHNlIGlmICghYWxsb3cgJiYgIXdyaXRlICYmIGluZGV4ICE9PSAtMSkge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkUGVybWlzc2lvbnNHcm91cC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfSBlbHNlIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZFBlcm1pc3Npb25zR3JvdXAgPSB0aGlzLnNlbGVjdGVkUGVybWlzc2lvbnNHcm91cC5tYXAoaSA9PiB7XHJcbiAgICAgICAgaWYgKGkuaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICBpLndyaXRlID0gd3JpdGU7XHJcbiAgICAgICAgICBpLmFsbG93ID0gYWxsb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlc2V0UmVwb3J0RGFzaGJvYXJkTGlzdCgpIHtcclxuICAgIHRoaXMucmVwb3J0RGFzaGJvYXJkTGlzdCA9IHRoaXMuZHVwbGljYXRlcmVwb3J0RGFzaGJvYXJkTGlzdDtcclxuICB9XHJcblxyXG4gIGFkZFJvbGUoKSB7XHJcbiAgICB0aGlzLmZvcm1TdWJtaXQgPSB0cnVlO1xyXG4gICAgbGV0IGRhdGEgPSB0aGlzLnJvbGVGb3JtLmdldFJhd1ZhbHVlKCk7XHJcbiAgICBpZiAodGhpcy5yb2xlRm9ybS52YWxpZCkge1xyXG4gICAgICBjb25zdCBkb3NzaWVyQ29uZmlnID0gdGhpcy5yZXBvcnREYXNoYm9hcmRMaXN0Py5maWx0ZXIoKGRvc3NpZXI6IGFueSkgPT4gZG9zc2llci5pZCA9PT0gZGF0YS5kb3NzaWVyaWQpPy5tYXAoKGE6IGFueSkgPT4gKHtcclxuICAgICAgICBpZDogYS5pZCxcclxuICAgICAgICBwcm9qZWN0SWQ6IGEucHJvamVjdElkXHJcbiAgICAgIH0pKVswXTtcclxuICAgICAgZGF0YS5wcmlvcml0eSA9IHRoaXMuZW52aXJvbm1lbnQucHJpb3JpdHk7XHJcbiAgICAgIGRhdGEuYXBwbGljYXRpb25pZCA9IHRoaXMuZW52aXJvbm1lbnQuYXBwbGljYXRpb25pZDtcclxuICAgICAgZGF0YS5wYXJlbnRpZCA9IDI7XHJcbiAgICAgIGRhdGEucGVybWlzc2lvbnMgPSB0aGlzLnNlbGVjdGVkUGVybWlzc2lvbnNHcm91cDtcclxuICAgICAgZGF0YS5kb3NzaWVyaWQgPSBKU09OLnN0cmluZ2lmeShkb3NzaWVyQ29uZmlnKTtcclxuICAgICAgZGF0YSA9IE9iamVjdC5hc3NpZ24oeyBvcmdhbml6YXRpb25pZDogdGhpcy5vcmdJZCB9LCBkYXRhKTtcclxuICAgICAgaWYgKHRoaXMucm9sZUlkKSB7XHJcbiAgICAgICAgZGF0YS5pZCA9IE51bWJlcih0aGlzLnJvbGVJZCk7XHJcbiAgICAgICAgdGhpcy5yb2xlc1NlcnZpY2UudXBkYXRlUm9sZSh0aGlzLnJvbGVJZCwgZGF0YSkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdldFJvbGVMaXN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwUG9saWN5R3JvdXBUb1JvbGUodGhpcy5yb2xlSWQsIGRhdGEucG9saWN5R3JvdXBJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoJ1JvbGUgdXBkYXRlZCBzdWNjZXNzZnVsbHknKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAoZXJyOiBhbnkpID0+IHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKGVyci5lcnJvci5tZXNzYWdlKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGF0YS5pZCA9IDA7XHJcbiAgICAgICAgZGF0YS5wcmlvcml0eSA9IHRoaXMuZW52aXJvbm1lbnQucHJpb3JpdHk7XHJcbiAgICAgICAgdGhpcy5yb2xlc1NlcnZpY2UuY3JlYXRlUm9sZShkYXRhKS5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgaWYgKGRhdGEucG9saWN5R3JvdXBJZCkge1xyXG4gICAgICAgICAgICAgIHRoaXMubWFwUG9saWN5R3JvdXBUb1JvbGUocmVzWydkYXRhJ10sIGRhdGEucG9saWN5R3JvdXBJZCwgJ2FkZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoJ1JvbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0Um9sZUxpc3QoKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAoZXJyOiBhbnkpID0+IHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKGVyci5lcnJvci5tZXNzYWdlKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1hcFBvbGljeUdyb3VwVG9Sb2xlKGlkOiBudW1iZXIsIGRhdGE6IFtdLCBhY3Rpb24/OiBzdHJpbmcpIHtcclxuICAgIGlmIChhY3Rpb24gPT09ICdhZGQnKSB7XHJcbiAgICAgIHRoaXMucm9sZXNTZXJ2aWNlLmNyZWF0ZVBvbGljeUdyb3VwRm9yUm9sZShpZCwgZGF0YSkuc3Vic2NyaWJlKFxyXG4gICAgICAgICgpID0+IGNvbnNvbGUubG9nKCdwb2xpY3kgZ3JvdXAgbWFwcGVkIHRvIHJvbGUgc3VjY2Vzc2Z1bGx5JyksXHJcbiAgICAgICAgKF9lcnI6IGFueSkgPT4gdGhpcy5hbGVydFNlcnZpY2UuZXJyb3IoQXBwQ29uc3RhbnRzLmVycm9yTWVzc2FnZSlcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucm9sZXNTZXJ2aWNlLnVwZGF0ZVBvbGljeUdyb3VwRm9yUm9sZShpZCwgZGF0YSkuc3Vic2NyaWJlKFxyXG4gICAgICAgICgpID0+IGNvbnNvbGUubG9nKCdwb2xpY3kgZ3JvdXAgbWFwcGVkIHRvIHJvbGUgc3VjY2Vzc2Z1bGx5JyksXHJcbiAgICAgICAgKF9lcnI6IGFueSkgPT4gdGhpcy5hbGVydFNlcnZpY2UuZXJyb3IoQXBwQ29uc3RhbnRzLmVycm9yTWVzc2FnZSlcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFJldHVyblZhbHVlKGFycmF5OiBBcnJheTxhbnk+ID0gW10sIHR5cGU/OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0eXBlID09PSAnaWQnXHJcbiAgICAgID8gYXJyYXkubWFwKCh7IGlkIH0pID0+IGlkKVxyXG4gICAgICA6IGFycmF5Lm1hcChpZCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHsgaWQgfTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRDaGVja2VkKGl0ZW06IEFycmF5PGFueT4pIHtcclxuICAgIHJldHVybiBpdGVtLmZpbHRlcigoeyBjaGVja2VkIH0pID0+IGNoZWNrZWQpLmxlbmd0aCA+IDA7XHJcbiAgfVxyXG4gIGdldENoZWNrZWRXcml0ZShpdGVtOiBBcnJheTxhbnk+KSB7XHJcbiAgICByZXR1cm4gaXRlbS5maWx0ZXIoKHsgY2hlY2tlZHdyaXRlIH0pID0+IGNoZWNrZWR3cml0ZSkubGVuZ3RoID4gMDtcclxuICB9XHJcblxyXG4gIGNhbmNlbCgpIHtcclxuICAgIHRoaXMucm9sZUZvcm0ucmVzZXQoKTtcclxuICAgIHRoaXMucm9sZUZvcm0uZW5hYmxlKCk7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25zID0gW107XHJcbiAgICB0aGlzLmZvcm1TdWJtaXQgPSBmYWxzZTtcclxuICAgIHRoaXMucGVybWlzc2lvbkFsbG93ID0gZmFsc2U7XHJcbiAgICB0aGlzLnJvbGVJZCA9IDA7XHJcbiAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnMgPSB7fTtcclxuICAgIHRoaXMuZmlsdGVyZWRSb2xlTGlzdCA9IHRoaXMucm9sZUxpc3Q7XHJcbiAgICB0aGlzLnBvbGljeUdyb3Vwc0xlbmd0aCA9IDA7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoZXZlbnQ6IEV2ZW50LCBpZDogYW55LCBpdGVtOiBhbnkpIHtcclxuICAgIGlmIChpdGVtPy5hY3RpdmVfdXNlciAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLmRlbGV0ZWFjdGl2ZV91c2VyID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuZGVsZXRlYWN0aXZlX2J1dHRvbm9rID0gZmFsc2U7XHJcbiAgICAgIC8vIFBlcmZvcm0gYWN0aW9uIHdoZW4gYWN0aXZlX3VzZXIgaXMgbm90IG51bGxcclxuICAgICAgY29uc29sZS5sb2coJ0RlbGV0aW5nIFJvbGUgd2l0aCBhY3RpdmUgdXNlcicpO1xyXG4gICAgICB0aGlzLm1vZGFsQ29udGVudCA9ICdUaGlzIFJvbGUgaXMgY3VycmVudGx5IGFzc29jaWF0ZWQgd2l0aCBhY3RpdmUgdXNlcnMuIERlLWxpbmsgdXNlcnMgZnJvbSB0aGlzIFJvbGUsIHRvIHByb2NlZWQgd2l0aCBkZWxldGluZy4nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gUGVyZm9ybSBhY3Rpb24gd2hlbiBhY3RpdmVfdXNlciBpcyBudWxsXHJcbiAgICAgIGNvbnNvbGUubG9nKCdEZWxldGluZyBSb2xlJyk7XHJcbiAgICAgIHRoaXMubW9kYWxDb250ZW50ID0gJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIFJvbGU/JztcclxuICAgICAgdGhpcy5kZWxldGVhY3RpdmVfdXNlciA9IHRydWU7XHJcbiAgICAgIHRoaXMuZGVsZXRlYWN0aXZlX2J1dHRvbm9rID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgdGhpcy5kZWxldGVkSWQgPSBpZDtcclxuICAgICQoJyNEZWxldGV1c2VyJykubW9kYWwoJ3Nob3cnKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZVJvbGUoKSB7XHJcbiAgICB0aGlzLnJvbGVzU2VydmljZS5kZWxldGVSb2xlKHRoaXMuZGVsZXRlZElkKS5zdWJzY3JpYmUoXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICB0aGlzLmNhbmNlbCgpO1xyXG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoJ1JvbGUgZGVsZXRlZCBzdWNjZXNzZnVsbHknKTtcclxuICAgICAgICAkKCcjRGVsZXRldXNlcicpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICAgICAgdGhpcy5nZXRSb2xlTGlzdCgpO1xyXG4gICAgICB9LFxyXG4gICAgICAoX2VycjogYW55KSA9PiB0aGlzLmFsZXJ0U2VydmljZS5lcnJvcignRmFpbGVkIHRvIGRlbGV0ZSBSb2xlJylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRSZXBvcnREYXNoYm9hcmQoKSB7XHJcbiAgICB0aGlzLnJlcG9ydERhc2hib2FyZExpc3QgPSBhd2FpdCB0aGlzLm1zdHJTZXJ2aWNlLmdldExpYnJhcnlEZXRhaWxzKCk7XHJcbiAgICB0aGlzLmR1cGxpY2F0ZXJlcG9ydERhc2hib2FyZExpc3QgPSBhd2FpdCB0aGlzLm1zdHJTZXJ2aWNlLmdldExpYnJhcnlEZXRhaWxzKCk7XHJcbiAgfVxyXG5cclxuICAvLyByb2xlVmFsaWRhdGlvbigpOiBhbnkge1xyXG4gIC8vICAgaWYgKCF0aGlzLnJvbGVGb3JtLnZhbHVlLmRvc3NpZXJpZCkge1xyXG4gIC8vICAgICB0aGlzLmFsZXJ0U2VydmljZS53YXJuKCdQbGVhc2UgZmlsbCBhbGwgcmVxdWlyZWQgZmllbGRzJyk7XHJcbiAgLy8gICAgIHJldHVybiBmYWxzZTtcclxuICAvLyAgIH1cclxuICAvLyAgIHJldHVybiB0cnVlO1xyXG4gIC8vIH1cclxuICBvbk1vZGVsUm9sZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLm1vZGVsUm9sZU5hbWUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHNlYXJjaExhbmRpbmdQYWdlTGlzdChldmVudDogRXZlbnQpIHtcclxuICAgIGNvbnN0IHZhbHVlID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgdGhpcy5kdWJsaWNhdGVMYW5kaW5nUGFnZSA9IHRoaXMubGFuZGluZ1BhZ2UuZmlsdGVyKChhOiBhbnkpID0+IGE/Lm5hbWU/LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh2YWx1ZSkpO1xyXG4gIH1cclxuXHJcbiAgcmVzZXRMYW5kaW5nUGFnZUxpc3QoKSB7XHJcbiAgICB0aGlzLmR1YmxpY2F0ZUxhbmRpbmdQYWdlID0gdGhpcy5sYW5kaW5nUGFnZTtcclxuICB9XHJcblxyXG4gIGFjdGl2YXRlTWVudShldmVudCkge1xyXG4gICAgaWYgKGV2ZW50Lml0ZW0ubGFiZWwgPT0gJ1Blcm1pc3Npb25zJykge1xyXG4gICAgICB0aGlzLmZpcnN0VGFiID0gdHJ1ZTtcclxuICAgICAgdGhpcy5jbGVhclBlcm1pc3Npb24oKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5maXJzdFRhYiA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmdldFBhZ2VJbmZvcm1hdGlvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZUluZm9ybWF0aW9uKCkge1xyXG4gICAgdGhpcy5wZXJtaXNzaW9uU2VydmljZS5nZXRBbGxQYWdlcyh0aGlzLnJvbGVJZCkuc3Vic2NyaWJlKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLm1lbnVMaXN0ID0gcmVzPy5kYXRhO1xyXG4gICAgICByZXMuZGF0YS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaXRlbS5sYWJlbCA9IGl0ZW0ubmFtZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMubmVzdGVkRGF0YSgpO1xyXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLm1haW5NZW51TGlzdCk7XHJcbiAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXN1bHQnKS5pbm5lckhUTUwgPSB0aGlzLmJ1aWxkTmF2aWdhdGlvbih0aGlzLm1lbnVMaXN0KTtcclxuXHJcbiAgICAgIC8vIHJlcy5kYXRhLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgLy8gICBpZiAoaXRlbS5wYXJlbnRpZCA9PSBudWxsKSB7XHJcbiAgICAgIC8vICAgICBsZXQgb2JqID0ge1xyXG4gICAgICAvLyAgICAgICBrZXkgOiAxLFxyXG4gICAgICAvLyAgICAgICBpZDogaXRlbS5pZCxcclxuICAgICAgLy8gICAgICAgcGFyZW50aWQ6IGl0ZW0ucGFyZW50aWQsXHJcbiAgICAgIC8vICAgICAgIGxhYmVsOiBpdGVtLm5hbWUsXHJcbiAgICAgIC8vICAgICAgIGRhdGE6ICdEb2N1bWVudHMgRm9sZGVyJyxcclxuICAgICAgLy8gICAgICAgaWNvbjogJ3BpIHBpLWZ3IHBpLWluYm94JyxcclxuICAgICAgLy8gICAgICAgY2hpbGRyZW46IFtdXHJcbiAgICAgIC8vICAgICB9XHJcbiAgICAgIC8vICAgICB0aGlzLm1haW5NZW51TGlzdC5wdXNoKG9iailcclxuICAgICAgLy8gICB9XHJcbiAgICAgIC8vIH0pO1xyXG5cclxuICAgICAgLy8gdGhpcy5tYWluTWVudUxpc3QubWFwKChtZW51LCBpbmRleDEpID0+IHtcclxuICAgICAgLy8gICB0aGlzLm1lbnVMaXN0Lm1hcCgobGlzdCwgaW5kZXgpID0+IHtcclxuICAgICAgLy8gICAgIGlmIChsaXN0Py5wYXJlbnRpZCA9PSBtZW51Py5pZCkge1xyXG4gICAgICAvLyAgICAgICBsZXQgb2JqID0ge1xyXG4gICAgICAvLyAgICAgICAgIGtleSA6IDIsXHJcbiAgICAgIC8vICAgICAgICAgaWQ6IGxpc3QuaWQsXHJcbiAgICAgIC8vICAgICAgICAgcGFyZW50aWQ6IGxpc3QucGFyZW50aWQsXHJcbiAgICAgIC8vICAgICAgICAgbGFiZWw6IGxpc3QubmFtZSxcclxuICAgICAgLy8gICAgICAgICBkYXRhOiAnRG9jdW1lbnRzIEZvbGRlcicsXHJcbiAgICAgIC8vICAgICAgICAgaWNvbjogJ3BpIHBpLWZ3IHBpLWluYm94JyxcclxuICAgICAgLy8gICAgICAgICBjaGlsZHJlbjogW11cclxuICAgICAgLy8gICAgICAgfVxyXG4gICAgICAvLyAgICAgICB0aGlzLm1haW5NZW51TGlzdFtpbmRleDFdLmNoaWxkcmVuLnB1c2gob2JqKTtcclxuICAgICAgLy8gICAgIH1cclxuICAgICAgLy8gICB9KVxyXG4gICAgICAvLyB9KVxyXG5cclxuICAgICAgLy8gdGhpcy5tYWluTWVudUxpc3QubWFwKChtZW51LCBpbmRleDEpID0+IHtcclxuICAgICAgLy8gICBtZW51LmNoaWxkcmVuLm1hcCgoc3ViaXRlbSwgc3ViaW5kZXgpID0+IHtcclxuICAgICAgLy8gICAgIHRoaXMubWVudUxpc3QubWFwKChsaXN0LCBpbmRleCkgPT4ge1xyXG4gICAgICAvLyAgICAgICBpZihsaXN0LnBhcmVudGlkID09IHN1Yml0ZW0uaWQpXHJcbiAgICAgIC8vICAgICAgIHtcclxuICAgICAgLy8gICAgICAgICBsZXQgb2JqID0ge1xyXG4gICAgICAvLyAgICAgICAgICAgICBrZXkgOiAzLFxyXG4gICAgICAvLyAgICAgICAgICAgICBpZDogbGlzdC5pZCxcclxuICAgICAgLy8gICAgICAgICAgICAgcGFyZW50aWQ6IGxpc3QucGFyZW50aWQsXHJcbiAgICAgIC8vICAgICAgICAgICAgIGxhYmVsOiBsaXN0Lm5hbWUsXHJcbiAgICAgIC8vICAgICAgICAgICAgIGRhdGE6ICdEb2N1bWVudHMgRm9sZGVyJyxcclxuICAgICAgLy8gICAgICAgICAgICAgaWNvbjogJ3BpIHBpLWZ3IHBpLWluYm94JyxcclxuICAgICAgLy8gICAgICAgICAgIH1cclxuICAgICAgLy8gICAgICAgICAgIHN1Yml0ZW0uY2hpbGRyZW4ucHVzaChvYmopO1xyXG4gICAgICAvLyAgICAgICB9XHJcblxyXG4gICAgICAvLyAgICAgfSlcclxuICAgICAgLy8gICB9KVxyXG4gICAgICAvLyB9KVxyXG5cclxuXHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVNZW51T3JkZXIoKSB7XHJcbiAgICB0aGlzLm1haW5NZW51TGlzdC5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICAnbWVudW9yZGVyJzogaW5kZXggKyAxLFxyXG4gICAgICAgICdpZCc6IGVsZW1lbnQucm9sZXBlcm1pc3Npb25pZCxcclxuICAgICAgICAncm9sZWlkJzogdGhpcy5yb2xlSWRcclxuXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZUFycmFuZ2VkTGlzdC5wdXNoKGRhdGEpXHJcbiAgICAgIGlmIChlbGVtZW50Py5jaGlsZHJlbj8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGVsZW1lbnQ/LmNoaWxkcmVuPy5mb3JFYWNoKChjaGlsZGVsZW1lbnQsIGNoaWxkaW5kZXgpID0+IHtcclxuICAgICAgICAgIGxldCBjaGlsZGRhdGEgPSB7XHJcbiAgICAgICAgICAgICdtZW51b3JkZXInOiBjaGlsZGluZGV4ICsgMSxcclxuICAgICAgICAgICAgJ2lkJzogY2hpbGRlbGVtZW50LnJvbGVwZXJtaXNzaW9uaWQsXHJcbiAgICAgICAgICAgICdyb2xlaWQnOiB0aGlzLnJvbGVJZFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5yZUFycmFuZ2VkTGlzdC5wdXNoKGNoaWxkZGF0YSlcclxuICAgICAgICAgIGlmIChjaGlsZGVsZW1lbnQ/LmNoaWxkcmVuPy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNoaWxkZWxlbWVudD8uY2hpbGRyZW4/LmZvckVhY2goKGNoaWxkcmVuZWxlbWVudCwgY2hpbGRyZW5pbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgIGxldCBjaGlsZHJlbmRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAnbWVudW9yZGVyJzogY2hpbGRyZW5pbmRleCArIDEsXHJcbiAgICAgICAgICAgICAgICAnaWQnOiBjaGlsZHJlbmVsZW1lbnQucm9sZXBlcm1pc3Npb25pZCxcclxuICAgICAgICAgICAgICAgICdyb2xlaWQnOiB0aGlzLnJvbGVJZFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB0aGlzLnJlQXJyYW5nZWRMaXN0LnB1c2goY2hpbGRyZW5kYXRhKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZygndGhpcy5yZWFycmFuZ2VsaXN0JywgdGhpcy5yZUFycmFuZ2VkTGlzdCk7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25TZXJ2aWNlLnVwZGF0ZU1lbnVPcmRlcih7IHBhZ2VzOiB0aGlzLnJlQXJyYW5nZWRMaXN0IH0pLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IHtcclxuICAgICAgLy8gdGhpcy5hbGVydFNlcnZpY2Uuc3VjY2VzcygnVXBkYXRlZCBTdWNjZXNzZnVsbHkhJyk7XHJcbiAgICAgIC8vIHRoaXMuU2VydmljZS5zZW5kVXBkYXRlKCdVcGRhdGVkIFN1Y2Nlc3NmdWxseScpO1xyXG4gICAgICAvLyB0aGlzLmdldFBhZ2VJbmZvcm1hdGlvbigpO1xyXG4gICAgICB0aGlzLmFkZFJvbGUoKTtcclxuICAgICAgY29uc3QgdXNlclJvbGUgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdyb2xlX2lkJyk7XHJcbiAgICAgIGlmIChOdW1iZXIodXNlclJvbGUpID09PSB0aGlzLnJvbGVJZCkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBub2RlRHJvcChldmVudCkge1xyXG4gICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQudGFyZ2V0LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGlmIChldmVudC5kcmFnTm9kZS5wYXJlbnRpZCA9PSBldmVudC5kcm9wTm9kZS5wYXJlbnRpZCkge1xyXG4gICAgICAgIGV2ZW50LmFjY2VwdCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKCdOb3QgQWxsb3dlZCB0byBEcm9wJyk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc29sZS5sb2coJ3RoaXMubWFpbk1lbnVMaXN0JywgdGhpcy5tYWluTWVudUxpc3QpXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZXJyb3IoJ05vdCBBbGxvd2VkIHRvIERyb3AnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNlbGVjdFBvbGljeUdyb3VwKCkge1xyXG4gICAgdGhpcy5wb2xpY3lHcm91cHNMZW5ndGggPSB0aGlzLnJvbGVGb3JtLnZhbHVlLnBvbGljeUdyb3VwSWQubGVuZ3RoO1xyXG4gIH1cclxufVxyXG4iLCI8YXBwLWFsZXJ0PjwvYXBwLWFsZXJ0PlxyXG48ZGl2IGNsYXNzPVwicGVybWlzc2lvblwiPlxyXG4gIDxkaXYgY2xhc3M9XCJyb3dcIiBbZm9ybUdyb3VwXT1cInJvbGVGb3JtXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29sLWxnLTQgY29sLW1kLTYgY29sLTEyXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJjbGVhcmZpeFwiPjwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnQgcHktMiBweC0yIHB4LXNtLTBcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLXBhbmUgZmFkZSBzaG93IGFjdGl2ZVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgYmdpY29uc2VhcmNoIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj4gPCEtLSBNb2RpZmllZCBsaW5lIC0tPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInAtaW5wdXQtaWNvbi1yaWdodCB3LTEwMFwiPlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwicGkgcGktdGltZXMtY2lyY2xlXCIgKGNsaWNrKT1cImNsZWFyU2VhcmNoKCRldmVudClcIj48L2k+XHJcbiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgZmllbGRLZXk9XCJTRVRUSU5HU19ST0xfU0VBUkNIX0JZX05BTUVcIiBwbGFjZWhvbGRlcj1cIlNlYXJjaCBieSBSb2xlIG5hbWVcIlxyXG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiAoa2V5dXApPVwic2VhcmNoUm9sZSgkZXZlbnQpXCIgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBidG5jb21tb24gbWwtMlwiIChjbGljayk9XCJvbkNsaWNrQWRkUm9sZSgpXCI+QWRkPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjbGVhcmZpeFwiPjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXJhY2Vzc1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGgtMTAwIHctMTAwIG5nLXN0YXItaW5zZXJ0ZWRcIlxyXG4gICAgICAgICAgICAgICpuZ0lmPVwiIWZpbHRlcmVkUm9sZUxpc3QubGVuZ3RoXCI+XHJcbiAgICAgICAgICAgICAgPHA+Tm8gUmVjb3JkIEZvdW5kPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbSBvZiBmaWx0ZXJlZFJvbGVMaXN0XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyB1c2VyZGF0YSBhbGlnbi1pdGVtcy1jZW50ZXJcIiAoY2xpY2spPVwiZ2V0Um9sZUluZm8oaXRlbS5pZClcIlxyXG4gICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwieyBhY3RpdmU6ICtpdGVtLmlkID09PSByb2xlSWQgfVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMCBjb2wtc20tMTAgY29sLTEwIG92ZXJmbG93X3R4dFwiPlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm5hbWV1c2VyXCI+e3sgaXRlbS5uYW1lIH19PC9zcGFuPiA8YnIgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0yIHRleHQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJyaWdodC1pY29uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLXRyYXNoIHRleHQtcHJpbWFyeVwiICpzaG93RmllbGQ9XCInU0VUVElOR1NfUk9MX0RFTEVURSdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cImRlbGV0ZSgkZXZlbnQsIGl0ZW0uaWQsIGl0ZW0pXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29sLWxnLTggY29sLW1kLTYgY29sLTEyIHJvbGVzLXJpZ2h0IGdyb3VwLXJvbGUgbXQtMlwiPlxyXG4gICAgICA8cC1jYXJkIGNsYXNzPVwicmJhYy1jYXJkXCIgW3N0eWxlXT1cInsgd2lkdGg6ICcxMDAlJywgJ21hcmdpbi1ib3R0b20nOiAnMmVtJyB9XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInN0cmlwX2hlYWQgdG9nZ2xlbGVmdFwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZXBvcnRfaGVhZCBmb250LXdlaWdodC1ib2xkXCI+Um9sZSBEZXRhaWxzPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwLWZsdWlkIHAtZm9ybWdyaWQgcm93XCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC1maWVsZCBjb2wtbGctNCBjb2wtbWQtMTIgY29sLTEyXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJyb2xlc05hbWVcIiBjbGFzcz1cInJlZmVycmFsLWZvcm0tbGFiZWxzXCI+Um9sZSBOYW1lXHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZXF1aXJlZGZpZWxkIHRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPGlucHV0IGlkPVwicm9sZXNOYW1lXCIgdHlwZT1cInRleHRcIiBmaWVsZEtleT1cIlNFVFRJTkdTX1JPTF9ST0xFX05BTUVcIiBmb3JtQ29udHJvbE5hbWU9XCJuYW1lXCJcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIFJvbGUgTmFtZVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJyb2xlc05hbWVcIiBbKG5nTW9kZWwpXT1cIm1vZGVsUm9sZU5hbWVcIlxyXG4gICAgICAgICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cIm9uTW9kZWxSb2xlKCRldmVudClcIiAoaW5wdXQpPVwib25JbnB1dCgkZXZlbnQsICduYW1lJywgJ1JvbGUgTmFtZScsIHRydWUpXCIgcElucHV0VGV4dCAvPlxyXG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVwidmFsaWRhdGlvbkVycm9yc1snUm9sZSBOYW1lJ11cIiBjbGFzcz1cInAtZXJyb3IgYmxvY2sgbXQtMVwiPnt7dmFsaWRhdGlvbkVycm9yc1snUm9sZSBOYW1lJ119fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIiF2YWxpZGF0aW9uRXJyb3JzWydSb2xlIE5hbWUnXSAmJiBmb3JtVmFsaWRhdGVbJ25hbWUnXS5lcnJvcnMgJiYgZm9ybVN1Ym1pdFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJmb3JtVmFsaWRhdGVbJ25hbWUnXS5pbnZhbGlkXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrIG10LTFcIj5Sb2xlIE5hbWUgaXMgcmVxdWlyZWQgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC1maWVsZCBjb2wtbGctNCBjb2wtbWQtMTIgY29sLTEyXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBhcmlhLWxhYmVsbGVkYnk9XCJsYW5kaW5nUGFnZVwiIGZvcj1cImxhbmRpbmdQYWdlXCIgY2xhc3M9XCJyZWZlcnJhbC1mb3JtLWxhYmVsc1wiPkxhbmRpbmcgUGFnZVxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVxdWlyZWRmaWVsZCB0ZXh0LWRhbmdlclwiPio8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxwLWRyb3Bkb3duIG5hbWU9XCJsYW5kaW5nUGFnZVwiIFtvcHRpb25zXT1cImR1YmxpY2F0ZUxhbmRpbmdQYWdlXCIgcGxhY2Vob2xkZXI9XCJTZWxlY3QgTGFuZGluZyBQYWdlXCJcclxuICAgICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJkZWZhdWx0cGFnZWlkXCIgZGVmYXVsdExhYmVsPVwiU2VsZWN0IExhbmRpbmcgUGFnZVwiIChvbkhpZGUpPVwicmVzZXRMYW5kaW5nUGFnZUxpc3QoKVwiXHJcbiAgICAgICAgICAgICAgW3Jlc2V0RmlsdGVyT25IaWRlXT1cInRydWVcIiBbZmlsdGVyXT1cInRydWVcIiBmaWx0ZXJCeT1cIm5hbWVcIiAoa2V5dXApPVwic2VhcmNoTGFuZGluZ1BhZ2VMaXN0KCRldmVudClcIlxyXG4gICAgICAgICAgICAgIFtzaG93Q2xlYXJdPVwidHJ1ZVwiIGZpZWxkS2V5PVwiU0VUVElOR1NfUk9MX0xBTkRJTkdfUEFHRVwiIG9wdGlvbkxhYmVsPVwibmFtZVwiIG9wdGlvblZhbHVlPVwiaWRcIlxyXG4gICAgICAgICAgICAgIGlucHV0SWQ9XCJsYW5kaW5nUGFnZVwiPlxyXG4gICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBsZXQtaXRlbSBwVGVtcGxhdGU9XCJzZWxlY3RlZEl0ZW1cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgcFRvb2x0aXA9XCJ7e2l0ZW0/Lm5hbWV9fVwiIHRvb2x0aXBQb3NpdGlvbj1cInRvcFwiIGNsYXNzPVwidGV4dC10cnVuY2F0ZVwiPiB7eyBpdGVtPy5uYW1lIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgbGV0LW9iamVjdCBwVGVtcGxhdGU9XCJpdGVtXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBvYmplY3QubmFtZSB9fVxyXG4gICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgICAgIDwvcC1kcm9wZG93bj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cImZvcm1WYWxpZGF0ZVsnZGVmYXVsdHBhZ2VpZCddLmVycm9ycyAmJiBmb3JtU3VibWl0XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cImZvcm1WYWxpZGF0ZVsnZGVmYXVsdHBhZ2VpZCddLmludmFsaWRcIiBjbGFzcz1cInAtZXJyb3IgYmxvY2sgbXQtMVwiPkxhbmRpbmcgUGFnZSBpcyByZXF1aXJlZFxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInAtZmllbGQgY29sLWxnLTQgY29sLW1kLTEyIGNvbC0xMlwiPlxyXG4gICAgICAgICAgICA8bGFiZWwgYXJpYS1sYWJlbGxlZGJ5PVwiZG9zc2llcklkXCIgZm9yPVwiZG9zc2llcklkXCIgY2xhc3M9XCJyZWZlcnJhbC1mb3JtLWxhYmVsc1wiPlJlcG9ydCBEYXNoYm9hcmQ8L2xhYmVsPlxyXG4gICAgICAgICAgICA8cC1kcm9wZG93biBbb3B0aW9uc109XCJyZXBvcnREYXNoYm9hcmRMaXN0XCIgb3B0aW9uTGFiZWw9XCJuYW1lXCIgaWQ9XCJkb3NzaWVyaWRcIiBbcmVzZXRGaWx0ZXJPbkhpZGVdPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgW2ZpbHRlcl09XCJ0cnVlXCIgW3Nob3dDbGVhcl09XCJ0cnVlXCIgb3B0aW9uVmFsdWU9XCJpZFwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IElEXCIgZm9ybUNvbnRyb2xOYW1lPVwiZG9zc2llcmlkXCI+XHJcbiAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIGxldC1pdGVtIHBUZW1wbGF0ZT1cInNlbGVjdGVkSXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBwVG9vbHRpcD1cInt7aXRlbT8ubmFtZX19XCIgdG9vbHRpcFBvc2l0aW9uPVwidG9wXCIgY2xhc3M9XCJ0ZXh0LXRydW5jYXRlXCI+IHt7IGl0ZW0/Lm5hbWUgfX08L2Rpdj5cclxuICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBsZXQtb2JqZWN0IHBUZW1wbGF0ZT1cIml0ZW1cIj5cclxuICAgICAgICAgICAgICAgIHt7IG9iamVjdC5uYW1lIH19XHJcbiAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgICAgICAgPC9wLWRyb3Bkb3duPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1sZy00IGNvbC1tZC0xMiBjb2wtMTJcIj48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInAtZmllbGQgY29sLWxnLTQgY29sLW1kLTEyIGNvbC0xMlwiPlxyXG4gICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgIGNsYXNzPVwicHVsbC1yaWdodCBtYi0yIGJ0biBidG4tcHJpbWFyeSBidG5jb21tb24gcmVwb3J0X2J1dHRvblwiXHJcbiAgICAgICAgICAgICAgICBmaWVsZEtleT1cIlNFVFRJTkdTX1JPTF9DT05GSUdVUkVfUEVSTUlTU0lPTlwiXHJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwiYWRkTmV3Um9sZSgnMScpXCI+XHJcbiAgICAgICAgICAgICAgICBDb25maWd1cmUgUGVybWlzc2lvblxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj4gLS0+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInAtZmx1aWQgcC1mb3JtZ3JpZCByb3dcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1tZC0xMiBjb2wtMTJcIj5cclxuICAgICAgICAgICAgPHAtYWNjb3JkaW9uIGNsYXNzPVwidy1mdWxsIHBvbGljeWdyb3VwLWFjY29yZGlvblwiIGljb25Qb3M9XCJlbmRWYWxcIj5cclxuICAgICAgICAgICAgICA8cC1hY2NvcmRpb25UYWI+XHJcbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgaGVhZC10ZXh0IGdhcC0yIHctZnVsbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZm9udC1ib2xkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgYXJpYS1sYWJlbGxlZGJ5PVwicG9saWN5R3JvdXBMaXN0XCIgZm9yPVwicG9saWN5R3JvdXBMaXN0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJtYi0wIHJlZmVycmFsLWZvcm0tbGFiZWxzXCI+UG9saWN5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcXVpcmVkZmllbGQgdGV4dC1kYW5nZXJcIj4qPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cInBvbGljeUdyb3Vwc0xlbmd0aCA+IDBcIiBjbGFzcz1cInBnLWNvdW50IG1sLTJcIj57e3BvbGljeUdyb3Vwc0xlbmd0aH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XHJcblxyXG4gICAgICAgICAgICAgICAgPHAtbXVsdGlTZWxlY3QgbmFtZT1cInBvbGljeUdyb3VwTGlzdFwiIFtvcHRpb25zXT1cInBvbGljeUdyb3VwTGlzdFwiIGZvcm1Db250cm9sTmFtZT1cInBvbGljeUdyb3VwSWRcIlxyXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0TGFiZWw9XCJTZWxlY3QgUG9saWN5IEdyb3Vwc1wiIG9wdGlvbkxhYmVsPVwicG9saWN5Z3JvdXBuYW1lXCIgb3B0aW9uVmFsdWU9XCJpZFwiXHJcbiAgICAgICAgICAgICAgICAgIChvbkhpZGUpPVwicmVzZXRSZXBvcnREYXNoYm9hcmRMaXN0KClcIiBbcmVzZXRGaWx0ZXJPbkhpZGVdPVwidHJ1ZVwiIGlucHV0SWQ9XCJwb2xpY3lHcm91cExpc3RcIlxyXG4gICAgICAgICAgICAgICAgICBhcmlhRmlsdGVyTGFiZWw9XCJudWxsXCIgZmllbGRLZXk9XCJTRVRUSU5HU19ST0xfUE9MSUNZX0dST1VQXCIgZGlzcGxheT1cImNoaXBcIlxyXG4gICAgICAgICAgICAgICAgICBzdHlsZUNsYXNzPVwicG9saWN5Z3JvdXAtdjIgdy0xMDBcIiAob25DaGFuZ2UpPVwic2VsZWN0UG9saWN5R3JvdXAoKVwiPlxyXG4gICAgICAgICAgICAgICAgPC9wLW11bHRpU2VsZWN0PlxyXG4gICAgICAgICAgICAgIDwvcC1hY2NvcmRpb25UYWI+XHJcbiAgICAgICAgICAgIDwvcC1hY2NvcmRpb24+XHJcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJmb3JtVmFsaWRhdGVbJ3BvbGljeUdyb3VwSWQnXS5lcnJvcnMgJiYgZm9ybVN1Ym1pdFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJmb3JtVmFsaWRhdGVbJ3BvbGljeUdyb3VwSWQnXS5pbnZhbGlkXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrIG10LTFcIj5Qb2xpY3kgR3JvdXAgaXMgcmVxdWlyZWRcclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtdC0yXCIgKm5nSWY9XCJwZXJtaXNzaW9uQWxsb3dcIj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwdWxsLXJpZ2h0IG1iLTIgbXItMiBidG4gYnRuLXByaW1hcnkgYnRuY29tbW9uXCIgZmllbGRLZXk9XCJTRVRUSU5HU19ST0xfU0VMRUNUX0FMTFwiXHJcbiAgICAgICAgICAgIChjbGljayk9XCJzZWxlY3RBbGxBY2Nlc3ModHJ1ZSlcIj5cclxuICAgICAgICAgICAgU2VsZWN0IEFsbFxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIGZpZWxkS2V5PVwiU0VUVElOR1NfUk9MX1JFU0VUXCIgY2xhc3M9XCJwdWxsLXJpZ2h0IG1iLTIgbXItMiBidG4gYmctd2hpdGUgdGV4dC1wcmltYXJ5IGJ0bmNhbmNlbFwiXHJcbiAgICAgICAgICAgIChjbGljayk9XCJzZWxlY3RBbGxBY2Nlc3MoZmFsc2UpXCIgW2Rpc2FibGVkXT1cImNoZWNrZWRSb2xlc0Fyci5sZW5ndGggPT09IDBcIj5cclxuICAgICAgICAgICAgUmVzZXRcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPCEtLSA8YnIgLz4gLS0+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInN0cmlwX2hlYWQgdG9nZ2xlbGVmdCBhZGp1c3R0b3BcIiAqbmdJZj1cInBlcm1pc3Npb25BbGxvd1wiPlxyXG4gICAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz1cInJlcG9ydF9oZWFkIGZvbnQtd2VpZ2h0LWJvbGRcIj5QZXJtaXNzaW9uczwvc3Bhbj4gLS0+XHJcbiAgICAgICAgICA8cC10YWJNZW51IFttb2RlbF09XCJpdGVtc1wiIFthY3RpdmVJdGVtXT1cImFjdGl2ZUl0ZW1cIj48L3AtdGFiTWVudT5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdiAqbmdJZj1cImZpcnN0VGFiXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdC0yIG1iLTNcIj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cInBlcm1pc3Npb25BbGxvd1wiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwZXJtaXNzaW9uLWZpbHRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sIGNsZWFyYm94XCIgcGxhY2Vob2xkZXI9XCJTZWFyY2ggYnkgUGVybWlzc2lvbnMgbmFtZVwiIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgKGtleXVwKT1cInNlYXJjaFJvbGVQZXJtaXNzaW9uKCRldmVudClcIiAvPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJwaSBwaS10aW1lcy1jaXJjbGVcIiAoY2xpY2spPVwiY2xlYXJQZXJtaXNzaW9uKCRldmVudClcIj48L2k+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciBoLTEwMCB3LTEwMCBuZy1zdGFyLWluc2VydGVkXCJcclxuICAgICAgICAgICAgICAgICpuZ0lmPVwiIWZpbHRlclBlcm1pc3Npb25zLmxlbmd0aFwiPlxyXG4gICAgICAgICAgICAgICAgPHA+Tm8gUmVjb3JkIEZvdW5kPC9wPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPHAtYWNjb3JkaW9uIGNsYXNzPVwidy0xMDBcIj5cclxuICAgICAgICAgICAgICA8cC1hY2NvcmRpb25UYWIgY2xhc3M9XCJ3LTEwMFwiICpuZ0Zvcj1cImxldCBwYWdlIG9mIHBlcm1pc3Npb25zOyBsZXQgaSA9IGluZGV4XCI+XHJcbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgIHt7IHBhZ2UuZGVzY3JpcHRpb24gfX1cclxuICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGluZ19hbmFseXNpcyBkYXRhbWFyZ2luXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIkN1c3RvbWNoZWNrYm94IHBsLTFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInN0eWxlZC1jaGVja2JveFwiIGlkPVwiY3VzdG9te3sgaSB9fVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChjaGFuZ2UpPVwic2VsZWN0QWxsUGFnZShpLCAkZXZlbnQpXCIgW2NoZWNrZWRdPVwicGFnZT8uY2hlY2tlZFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiY3VzdG9te3sgaSB9fVwiIGNsYXNzPVwiaGVhZGluZ19yb2xlXCI+e3sgcGFnZS5kZXNjcmlwdGlvbiB9fTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibWFyZ2ludWxfbGlzdCBlY21zX3JvbGVzY3JvbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBwZXJtaXNzaW9uIG9mIHBhZ2U/LnBlcm1pc3Npb25zOyBsZXQgaiA9IGluZGV4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaXNQcml2aWxhZ2UocGVybWlzc2lvbik7IGVsc2UgcGVybWlzc2lvbk9ubHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbm5lcl9jaGlsZGFjY2VzcyBkLWZsZXggbXQtMCBweS0xXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1pbmxpbmUtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiQ3VzdG9tY2hlY2tib3ggcGwtMSBtYi0wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIFtjaGVja2VkXT1cInBlcm1pc3Npb24/LmNoZWNrZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNoYW5nZSk9XCJzZWxlY3RBbGxQcml2aWxhZ2UoaSwgaiwgJGV2ZW50KVwiIGlkPVwiZGVzY3JpcHRpb257eyBqIH19XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNoZWNrbWFya1wiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImRlc2NyaXB0aW9ue3sgaiB9fVwiIGNsYXNzPVwiaGVhZGluZ19yb2xlIG1iLTBcIj57e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb24uZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWwtMVwiICpuZ0Zvcj1cImxldCBwcml2aWxlZ2Ugb2YgcGVybWlzc2lvbj8ucGVybWlzc2lvbnM7IGxldCBrID0gaW5kZXhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgW2NoZWNrZWRdPVwicHJpdmlsZWdlPy5jaGVja2VkXCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJjdXN0b21Td2l0Y2hlc3JvbGVzc3t7IGkgfX17eyBqIH19e3sgayB9fVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cInNlbGVjdFByaXZpbGVnZShpLCBqLCBrLCAkZXZlbnQpXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIiBmb3I9XCJjdXN0b21Td2l0Y2hlc3JvbGVzc3t7IGkgfX17eyBqIH19e3sgayB9fVwiPnt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmlsZWdlLmRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjcGVybWlzc2lvbk9ubHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIFtjaGVja2VkXT1cInBlcm1pc3Npb24/LmNoZWNrZWRcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cInNlbGVjdFBhZ2UoaSwgaiwgJGV2ZW50KVwiIGlkPVwiY3VzdG9tU3dpdGNoZXNyb2xlc3t7IGkgfX17eyBqIH19XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCIgZm9yPVwiY3VzdG9tU3dpdGNoZXNyb2xlc3t7IGkgfX17eyBqIH19XCI+e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbi5kZXNjcmlwdGlvbiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICAgICAgICAgIDwvcC1hY2NvcmRpb25UYWI+XHJcbiAgICAgICAgICAgIDwvcC1hY2NvcmRpb24+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgYm94IGQtbm9uZVwiICpuZ0Zvcj1cImxldCBwYWdlIG9mIHBlcm1pc3Npb25zOyBsZXQgaSA9IGluZGV4XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRpbmdfYW5hbHlzaXMgZGF0YW1hcmdpblwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIkN1c3RvbWNoZWNrYm94XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInN0eWxlZC1jaGVja2JveFwiIGlkPVwiY3VzdG9te3sgaSB9fVwiIChjaGFuZ2UpPVwic2VsZWN0QWxsUGFnZShpLCAkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgICAgICBbY2hlY2tlZF09XCJwYWdlPy5jaGVja2VkXCIgLz5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImN1c3RvbXt7IGkgfX1cIiBjbGFzcz1cImhlYWRpbmdfcm9sZVwiPnt7IHBhZ2UuZGVzY3JpcHRpb24gfX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgIDx1bCBjbGFzcz1cIm1hcmdpbnVsX2xpc3QgZWNtc19yb2xlc2Nyb2xsXCI+XHJcbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBwZXJtaXNzaW9uIG9mIHBhZ2U/LnBlcm1pc3Npb25zOyBsZXQgaiA9IGluZGV4XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpc1ByaXZpbGFnZShwZXJtaXNzaW9uKTsgZWxzZSBwZXJtaXNzaW9uT25seVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbm5lcl9jaGlsZGFjY2Vzc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJDdXN0b21jaGVja2JveFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBbY2hlY2tlZF09XCJwZXJtaXNzaW9uPy5jaGVja2VkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjaGFuZ2UpPVwic2VsZWN0QWxsUHJpdmlsYWdlKGksIGosICRldmVudClcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2hlY2ttYXJrXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImhlYWRpbmdfcm9sZVwiPnt7IHBlcm1pc3Npb24uZGVzY3JpcHRpb24gfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSAqbmdGb3I9XCJsZXQgcHJpdmlsZWdlIG9mIHBlcm1pc3Npb24/LnBlcm1pc3Npb25zOyBsZXQgayA9IGluZGV4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgW2NoZWNrZWRdPVwicHJpdmlsZWdlPy5jaGVja2VkXCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJjdXN0b21Td2l0Y2hlc3JvbGVzc3t7IGkgfX17eyBqIH19e3sgayB9fVwiIChjbGljayk9XCJzZWxlY3RQcml2aWxlZ2UoaSwgaiwgaywgJGV2ZW50KVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCIgZm9yPVwiY3VzdG9tU3dpdGNoZXNyb2xlc3N7eyBpIH19e3sgaiB9fXt7IGsgfX1cIj57e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByaXZpbGVnZS5kZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH19PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI3Blcm1pc3Npb25Pbmx5PlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjdXN0b20tY29udHJvbCBjdXN0b20tc3dpdGNoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBbY2hlY2tlZF09XCJwZXJtaXNzaW9uPy5jaGVja2VkXCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cInNlbGVjdFBhZ2UoaSwgaiwgJGV2ZW50KVwiIGlkPVwiY3VzdG9tU3dpdGNoZXNyb2xlc3t7IGkgfX17eyBqIH19XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIiBmb3I9XCJjdXN0b21Td2l0Y2hlc3JvbGVze3sgaSB9fXt7IGogfX1cIj57e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb24uZGVzY3JpcHRpb24gfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgYnRuIGJ0bi1wcmltYXJ5IGJ0bmNvbW1vblwiIGZpZWxkS2V5PVwiU0VUVElOR1NfUk9MX0FERF9ST0xFXCIgKGNsaWNrKT1cImFkZFJvbGUoKVwiPlxyXG4gICAgICAgICAgICAgIHt7IHJvbGVJZCA/ICdVcGRhdGUnIDogJ0FkZCcgfX0gUm9sZVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgbXItMiBidG4gYmctd2hpdGUgdGV4dC1wcmltYXJ5IGJ0bmNhbmNlbFwiIGZpZWxkS2V5PVwiU0VUVElOR1NfUk9MX0NBTkNFTFwiXHJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cImNhbmNlbCgpXCIgW2Rpc2FibGVkXT1cIiFlbmFibGVCdXR0b25cIj5cclxuICAgICAgICAgICAgICBDbGVhclxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8ZGl2ICpuZ0lmPVwiIWZpcnN0VGFiXCI+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIG10LTRcIj5cclxuICAgICAgICAgICAgPHAtdHJlZSBbdmFsdWVdPVwibWFpbk1lbnVMaXN0XCIgW2RyYWdnYWJsZU5vZGVzXT1cInRydWVcIiBbZHJvcHBhYmxlTm9kZXNdPVwidHJ1ZVwiIGRyYWdnYWJsZVNjb3BlPVwic2VsZlwiXHJcbiAgICAgICAgICAgICAgZHJvcHBhYmxlU2NvcGU9XCJzZWxmXCIgY2xhc3M9XCJ3LWZ1bGwgbWQ6dy0zMHJlbVwiIHNlbGVjdGlvbk1vZGU9XCJzaW5nbGVcIiBbKHNlbGVjdGlvbildPVwic2VsZWN0ZWRGaWxlXCJcclxuICAgICAgICAgICAgICBbdmFsaWRhdGVEcm9wXT1cInRydWVcIiAob25Ob2RlRHJvcCk9XCJub2RlRHJvcCgkZXZlbnQpXCI+PC9wLXRyZWU+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibXQtMlwiPlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHVsbC1yaWdodCBtYi0yIGJ0biBidG4tcHJpbWFyeSBidG5jb21tb25cIiBmaWVsZEtleT1cIlNFVFRJTkdTX1JPTF9BRERfUk9MRVwiXHJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cInVwZGF0ZU1lbnVPcmRlcigpXCI+XHJcbiAgICAgICAgICAgICAgU3VibWl0XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxiciAvPlxyXG4gICAgICA8L3AtY2FyZD5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG48L2Rpdj5cclxuXHJcbjxkaXYgY2xhc3M9XCJtb2RhbFwiIGlkPVwiRGVsZXRldXNlclwiIHRhYmluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCI+XHJcbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxyXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCIgKm5nSWY9XCJkZWxldGVhY3RpdmVfdXNlclwiPkRlbGV0ZSBSb2xlPC9oNT5cclxuICAgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiICpuZ0lmPVwiIWRlbGV0ZWFjdGl2ZV91c2VyXCI+V2FybmluZyAtIFJvbGU8L2g1PlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxyXG4gICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAge3sgbW9kYWxDb250ZW50IH19XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTJcIj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwdWxsLXJpZ2h0IG1iLTIgYnRuIGJ0bi1wcmltYXJ5IGJ0bmNvbW1vbiBkZWxldGVcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIChjbGljayk9XCJkZWxldGVSb2xlKClcIlxyXG4gICAgICAgICAgICAqbmdJZj1cImRlbGV0ZWFjdGl2ZV91c2VyXCI+XHJcbiAgICAgICAgICAgIERlbGV0ZVxyXG4gICAgICAgICAgPC9idXR0b24+XHJcblxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBtci0yIGJ0biBiZy13aGl0ZSB0ZXh0LXByaW1hcnkgYnRuY2FuY2VsXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIlxyXG4gICAgICAgICAgICAqbmdJZj1cImRlbGV0ZWFjdGl2ZV9idXR0b25va1wiPlxyXG4gICAgICAgICAgICBDYW5jZWxcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBtci0yIGJ0biBiZy13aGl0ZSB0ZXh0LXByaW1hcnkgYnRuY2FuY2VsXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIlxyXG4gICAgICAgICAgICAqbmdJZj1cIiFkZWxldGVhY3RpdmVfYnV0dG9ub2tcIj5cclxuICAgICAgICAgICAgT0tcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+Il19